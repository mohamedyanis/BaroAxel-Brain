
BaroAxel_LED_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08004a94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004a94  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b168  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aeb  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00012cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000761  00000000  00000000  00013650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000114ff  00000000  00000000  00013db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d915  00000000  00000000  000252b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006773e  00000000  00000000  00032bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  0009a348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004918 	.word	0x08004918

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004918 	.word	0x08004918

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 fcec 	bl	8000cdc <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 fce7 	bl	8000cdc <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__aeabi_ddiv>:
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	46de      	mov	lr, fp
 800047c:	4645      	mov	r5, r8
 800047e:	4657      	mov	r7, sl
 8000480:	464e      	mov	r6, r9
 8000482:	b5e0      	push	{r5, r6, r7, lr}
 8000484:	b087      	sub	sp, #28
 8000486:	9200      	str	r2, [sp, #0]
 8000488:	9301      	str	r3, [sp, #4]
 800048a:	030b      	lsls	r3, r1, #12
 800048c:	0b1b      	lsrs	r3, r3, #12
 800048e:	469b      	mov	fp, r3
 8000490:	0fca      	lsrs	r2, r1, #31
 8000492:	004b      	lsls	r3, r1, #1
 8000494:	0004      	movs	r4, r0
 8000496:	4680      	mov	r8, r0
 8000498:	0d5b      	lsrs	r3, r3, #21
 800049a:	9202      	str	r2, [sp, #8]
 800049c:	d100      	bne.n	80004a0 <__aeabi_ddiv+0x28>
 800049e:	e16a      	b.n	8000776 <__aeabi_ddiv+0x2fe>
 80004a0:	4ad4      	ldr	r2, [pc, #848]	@ (80007f4 <__aeabi_ddiv+0x37c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d100      	bne.n	80004a8 <__aeabi_ddiv+0x30>
 80004a6:	e18c      	b.n	80007c2 <__aeabi_ddiv+0x34a>
 80004a8:	4659      	mov	r1, fp
 80004aa:	0f42      	lsrs	r2, r0, #29
 80004ac:	00c9      	lsls	r1, r1, #3
 80004ae:	430a      	orrs	r2, r1
 80004b0:	2180      	movs	r1, #128	@ 0x80
 80004b2:	0409      	lsls	r1, r1, #16
 80004b4:	4311      	orrs	r1, r2
 80004b6:	00c2      	lsls	r2, r0, #3
 80004b8:	4690      	mov	r8, r2
 80004ba:	4acf      	ldr	r2, [pc, #828]	@ (80007f8 <__aeabi_ddiv+0x380>)
 80004bc:	4689      	mov	r9, r1
 80004be:	4692      	mov	sl, r2
 80004c0:	449a      	add	sl, r3
 80004c2:	2300      	movs	r3, #0
 80004c4:	2400      	movs	r4, #0
 80004c6:	9303      	str	r3, [sp, #12]
 80004c8:	9e00      	ldr	r6, [sp, #0]
 80004ca:	9f01      	ldr	r7, [sp, #4]
 80004cc:	033b      	lsls	r3, r7, #12
 80004ce:	0b1b      	lsrs	r3, r3, #12
 80004d0:	469b      	mov	fp, r3
 80004d2:	007b      	lsls	r3, r7, #1
 80004d4:	0030      	movs	r0, r6
 80004d6:	0d5b      	lsrs	r3, r3, #21
 80004d8:	0ffd      	lsrs	r5, r7, #31
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_ddiv+0x68>
 80004de:	e128      	b.n	8000732 <__aeabi_ddiv+0x2ba>
 80004e0:	4ac4      	ldr	r2, [pc, #784]	@ (80007f4 <__aeabi_ddiv+0x37c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d100      	bne.n	80004e8 <__aeabi_ddiv+0x70>
 80004e6:	e177      	b.n	80007d8 <__aeabi_ddiv+0x360>
 80004e8:	4659      	mov	r1, fp
 80004ea:	0f72      	lsrs	r2, r6, #29
 80004ec:	00c9      	lsls	r1, r1, #3
 80004ee:	430a      	orrs	r2, r1
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	0409      	lsls	r1, r1, #16
 80004f4:	4311      	orrs	r1, r2
 80004f6:	468b      	mov	fp, r1
 80004f8:	49bf      	ldr	r1, [pc, #764]	@ (80007f8 <__aeabi_ddiv+0x380>)
 80004fa:	00f2      	lsls	r2, r6, #3
 80004fc:	468c      	mov	ip, r1
 80004fe:	4651      	mov	r1, sl
 8000500:	4463      	add	r3, ip
 8000502:	1acb      	subs	r3, r1, r3
 8000504:	469a      	mov	sl, r3
 8000506:	2300      	movs	r3, #0
 8000508:	9e02      	ldr	r6, [sp, #8]
 800050a:	406e      	eors	r6, r5
 800050c:	2c0f      	cmp	r4, #15
 800050e:	d827      	bhi.n	8000560 <__aeabi_ddiv+0xe8>
 8000510:	49ba      	ldr	r1, [pc, #744]	@ (80007fc <__aeabi_ddiv+0x384>)
 8000512:	00a4      	lsls	r4, r4, #2
 8000514:	5909      	ldr	r1, [r1, r4]
 8000516:	468f      	mov	pc, r1
 8000518:	46cb      	mov	fp, r9
 800051a:	4642      	mov	r2, r8
 800051c:	9e02      	ldr	r6, [sp, #8]
 800051e:	9b03      	ldr	r3, [sp, #12]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d016      	beq.n	8000552 <__aeabi_ddiv+0xda>
 8000524:	2b03      	cmp	r3, #3
 8000526:	d100      	bne.n	800052a <__aeabi_ddiv+0xb2>
 8000528:	e2a6      	b.n	8000a78 <__aeabi_ddiv+0x600>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d000      	beq.n	8000530 <__aeabi_ddiv+0xb8>
 800052e:	e0df      	b.n	80006f0 <__aeabi_ddiv+0x278>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	2400      	movs	r4, #0
 8000536:	4690      	mov	r8, r2
 8000538:	051b      	lsls	r3, r3, #20
 800053a:	4323      	orrs	r3, r4
 800053c:	07f6      	lsls	r6, r6, #31
 800053e:	4333      	orrs	r3, r6
 8000540:	4640      	mov	r0, r8
 8000542:	0019      	movs	r1, r3
 8000544:	b007      	add	sp, #28
 8000546:	bcf0      	pop	{r4, r5, r6, r7}
 8000548:	46bb      	mov	fp, r7
 800054a:	46b2      	mov	sl, r6
 800054c:	46a9      	mov	r9, r5
 800054e:	46a0      	mov	r8, r4
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000552:	2200      	movs	r2, #0
 8000554:	2400      	movs	r4, #0
 8000556:	4690      	mov	r8, r2
 8000558:	4ba6      	ldr	r3, [pc, #664]	@ (80007f4 <__aeabi_ddiv+0x37c>)
 800055a:	e7ed      	b.n	8000538 <__aeabi_ddiv+0xc0>
 800055c:	002e      	movs	r6, r5
 800055e:	e7df      	b.n	8000520 <__aeabi_ddiv+0xa8>
 8000560:	45cb      	cmp	fp, r9
 8000562:	d200      	bcs.n	8000566 <__aeabi_ddiv+0xee>
 8000564:	e1d4      	b.n	8000910 <__aeabi_ddiv+0x498>
 8000566:	d100      	bne.n	800056a <__aeabi_ddiv+0xf2>
 8000568:	e1cf      	b.n	800090a <__aeabi_ddiv+0x492>
 800056a:	2301      	movs	r3, #1
 800056c:	425b      	negs	r3, r3
 800056e:	469c      	mov	ip, r3
 8000570:	4644      	mov	r4, r8
 8000572:	4648      	mov	r0, r9
 8000574:	2700      	movs	r7, #0
 8000576:	44e2      	add	sl, ip
 8000578:	465b      	mov	r3, fp
 800057a:	0e15      	lsrs	r5, r2, #24
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	431d      	orrs	r5, r3
 8000580:	0c19      	lsrs	r1, r3, #16
 8000582:	042b      	lsls	r3, r5, #16
 8000584:	0212      	lsls	r2, r2, #8
 8000586:	9500      	str	r5, [sp, #0]
 8000588:	0c1d      	lsrs	r5, r3, #16
 800058a:	4691      	mov	r9, r2
 800058c:	9102      	str	r1, [sp, #8]
 800058e:	9503      	str	r5, [sp, #12]
 8000590:	f7ff fe52 	bl	8000238 <__aeabi_uidivmod>
 8000594:	0002      	movs	r2, r0
 8000596:	436a      	muls	r2, r5
 8000598:	040b      	lsls	r3, r1, #16
 800059a:	0c21      	lsrs	r1, r4, #16
 800059c:	4680      	mov	r8, r0
 800059e:	4319      	orrs	r1, r3
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d909      	bls.n	80005b8 <__aeabi_ddiv+0x140>
 80005a4:	9d00      	ldr	r5, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	46ac      	mov	ip, r5
 80005aa:	425b      	negs	r3, r3
 80005ac:	4461      	add	r1, ip
 80005ae:	469c      	mov	ip, r3
 80005b0:	44e0      	add	r8, ip
 80005b2:	428d      	cmp	r5, r1
 80005b4:	d800      	bhi.n	80005b8 <__aeabi_ddiv+0x140>
 80005b6:	e1fb      	b.n	80009b0 <__aeabi_ddiv+0x538>
 80005b8:	1a88      	subs	r0, r1, r2
 80005ba:	9902      	ldr	r1, [sp, #8]
 80005bc:	f7ff fe3c 	bl	8000238 <__aeabi_uidivmod>
 80005c0:	9a03      	ldr	r2, [sp, #12]
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	4342      	muls	r2, r0
 80005c6:	0409      	lsls	r1, r1, #16
 80005c8:	0c24      	lsrs	r4, r4, #16
 80005ca:	0003      	movs	r3, r0
 80005cc:	430c      	orrs	r4, r1
 80005ce:	42a2      	cmp	r2, r4
 80005d0:	d906      	bls.n	80005e0 <__aeabi_ddiv+0x168>
 80005d2:	9900      	ldr	r1, [sp, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	468c      	mov	ip, r1
 80005d8:	4464      	add	r4, ip
 80005da:	42a1      	cmp	r1, r4
 80005dc:	d800      	bhi.n	80005e0 <__aeabi_ddiv+0x168>
 80005de:	e1e1      	b.n	80009a4 <__aeabi_ddiv+0x52c>
 80005e0:	1aa0      	subs	r0, r4, r2
 80005e2:	4642      	mov	r2, r8
 80005e4:	0412      	lsls	r2, r2, #16
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4693      	mov	fp, r2
 80005ea:	464b      	mov	r3, r9
 80005ec:	4659      	mov	r1, fp
 80005ee:	0c1b      	lsrs	r3, r3, #16
 80005f0:	001d      	movs	r5, r3
 80005f2:	9304      	str	r3, [sp, #16]
 80005f4:	040b      	lsls	r3, r1, #16
 80005f6:	4649      	mov	r1, r9
 80005f8:	0409      	lsls	r1, r1, #16
 80005fa:	0c09      	lsrs	r1, r1, #16
 80005fc:	000c      	movs	r4, r1
 80005fe:	0c1b      	lsrs	r3, r3, #16
 8000600:	435c      	muls	r4, r3
 8000602:	0c12      	lsrs	r2, r2, #16
 8000604:	436b      	muls	r3, r5
 8000606:	4688      	mov	r8, r1
 8000608:	4351      	muls	r1, r2
 800060a:	436a      	muls	r2, r5
 800060c:	0c25      	lsrs	r5, r4, #16
 800060e:	46ac      	mov	ip, r5
 8000610:	185b      	adds	r3, r3, r1
 8000612:	4463      	add	r3, ip
 8000614:	4299      	cmp	r1, r3
 8000616:	d903      	bls.n	8000620 <__aeabi_ddiv+0x1a8>
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0249      	lsls	r1, r1, #9
 800061c:	468c      	mov	ip, r1
 800061e:	4462      	add	r2, ip
 8000620:	0c19      	lsrs	r1, r3, #16
 8000622:	0424      	lsls	r4, r4, #16
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c24      	lsrs	r4, r4, #16
 8000628:	188a      	adds	r2, r1, r2
 800062a:	191c      	adds	r4, r3, r4
 800062c:	4290      	cmp	r0, r2
 800062e:	d302      	bcc.n	8000636 <__aeabi_ddiv+0x1be>
 8000630:	d116      	bne.n	8000660 <__aeabi_ddiv+0x1e8>
 8000632:	42a7      	cmp	r7, r4
 8000634:	d214      	bcs.n	8000660 <__aeabi_ddiv+0x1e8>
 8000636:	465b      	mov	r3, fp
 8000638:	9d00      	ldr	r5, [sp, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	444f      	add	r7, r9
 800063e:	9305      	str	r3, [sp, #20]
 8000640:	454f      	cmp	r7, r9
 8000642:	419b      	sbcs	r3, r3
 8000644:	46ac      	mov	ip, r5
 8000646:	425b      	negs	r3, r3
 8000648:	4463      	add	r3, ip
 800064a:	18c0      	adds	r0, r0, r3
 800064c:	4285      	cmp	r5, r0
 800064e:	d300      	bcc.n	8000652 <__aeabi_ddiv+0x1da>
 8000650:	e1a1      	b.n	8000996 <__aeabi_ddiv+0x51e>
 8000652:	4282      	cmp	r2, r0
 8000654:	d900      	bls.n	8000658 <__aeabi_ddiv+0x1e0>
 8000656:	e1f6      	b.n	8000a46 <__aeabi_ddiv+0x5ce>
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x1e4>
 800065a:	e1f1      	b.n	8000a40 <__aeabi_ddiv+0x5c8>
 800065c:	9b05      	ldr	r3, [sp, #20]
 800065e:	469b      	mov	fp, r3
 8000660:	1b3c      	subs	r4, r7, r4
 8000662:	42a7      	cmp	r7, r4
 8000664:	41bf      	sbcs	r7, r7
 8000666:	9d00      	ldr	r5, [sp, #0]
 8000668:	1a80      	subs	r0, r0, r2
 800066a:	427f      	negs	r7, r7
 800066c:	1bc0      	subs	r0, r0, r7
 800066e:	4285      	cmp	r5, r0
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x1fc>
 8000672:	e1d0      	b.n	8000a16 <__aeabi_ddiv+0x59e>
 8000674:	9902      	ldr	r1, [sp, #8]
 8000676:	f7ff fddf 	bl	8000238 <__aeabi_uidivmod>
 800067a:	9a03      	ldr	r2, [sp, #12]
 800067c:	040b      	lsls	r3, r1, #16
 800067e:	4342      	muls	r2, r0
 8000680:	0c21      	lsrs	r1, r4, #16
 8000682:	0007      	movs	r7, r0
 8000684:	4319      	orrs	r1, r3
 8000686:	428a      	cmp	r2, r1
 8000688:	d900      	bls.n	800068c <__aeabi_ddiv+0x214>
 800068a:	e178      	b.n	800097e <__aeabi_ddiv+0x506>
 800068c:	1a88      	subs	r0, r1, r2
 800068e:	9902      	ldr	r1, [sp, #8]
 8000690:	f7ff fdd2 	bl	8000238 <__aeabi_uidivmod>
 8000694:	9a03      	ldr	r2, [sp, #12]
 8000696:	0424      	lsls	r4, r4, #16
 8000698:	4342      	muls	r2, r0
 800069a:	0409      	lsls	r1, r1, #16
 800069c:	0c24      	lsrs	r4, r4, #16
 800069e:	0003      	movs	r3, r0
 80006a0:	430c      	orrs	r4, r1
 80006a2:	42a2      	cmp	r2, r4
 80006a4:	d900      	bls.n	80006a8 <__aeabi_ddiv+0x230>
 80006a6:	e15d      	b.n	8000964 <__aeabi_ddiv+0x4ec>
 80006a8:	4641      	mov	r1, r8
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	043a      	lsls	r2, r7, #16
 80006ae:	431a      	orrs	r2, r3
 80006b0:	9d04      	ldr	r5, [sp, #16]
 80006b2:	0413      	lsls	r3, r2, #16
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	4359      	muls	r1, r3
 80006b8:	4647      	mov	r7, r8
 80006ba:	436b      	muls	r3, r5
 80006bc:	469c      	mov	ip, r3
 80006be:	0c10      	lsrs	r0, r2, #16
 80006c0:	4347      	muls	r7, r0
 80006c2:	0c0b      	lsrs	r3, r1, #16
 80006c4:	44bc      	add	ip, r7
 80006c6:	4463      	add	r3, ip
 80006c8:	4368      	muls	r0, r5
 80006ca:	429f      	cmp	r7, r3
 80006cc:	d903      	bls.n	80006d6 <__aeabi_ddiv+0x25e>
 80006ce:	2580      	movs	r5, #128	@ 0x80
 80006d0:	026d      	lsls	r5, r5, #9
 80006d2:	46ac      	mov	ip, r5
 80006d4:	4460      	add	r0, ip
 80006d6:	0c1f      	lsrs	r7, r3, #16
 80006d8:	0409      	lsls	r1, r1, #16
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	0c09      	lsrs	r1, r1, #16
 80006de:	183f      	adds	r7, r7, r0
 80006e0:	185b      	adds	r3, r3, r1
 80006e2:	42bc      	cmp	r4, r7
 80006e4:	d200      	bcs.n	80006e8 <__aeabi_ddiv+0x270>
 80006e6:	e102      	b.n	80008ee <__aeabi_ddiv+0x476>
 80006e8:	d100      	bne.n	80006ec <__aeabi_ddiv+0x274>
 80006ea:	e0fd      	b.n	80008e8 <__aeabi_ddiv+0x470>
 80006ec:	2301      	movs	r3, #1
 80006ee:	431a      	orrs	r2, r3
 80006f0:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <__aeabi_ddiv+0x388>)
 80006f2:	4453      	add	r3, sl
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_ddiv+0x282>
 80006f8:	e0ae      	b.n	8000858 <__aeabi_ddiv+0x3e0>
 80006fa:	0751      	lsls	r1, r2, #29
 80006fc:	d000      	beq.n	8000700 <__aeabi_ddiv+0x288>
 80006fe:	e198      	b.n	8000a32 <__aeabi_ddiv+0x5ba>
 8000700:	4659      	mov	r1, fp
 8000702:	01c9      	lsls	r1, r1, #7
 8000704:	d506      	bpl.n	8000714 <__aeabi_ddiv+0x29c>
 8000706:	4659      	mov	r1, fp
 8000708:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <__aeabi_ddiv+0x38c>)
 800070a:	4019      	ands	r1, r3
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	468b      	mov	fp, r1
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4453      	add	r3, sl
 8000714:	493c      	ldr	r1, [pc, #240]	@ (8000808 <__aeabi_ddiv+0x390>)
 8000716:	428b      	cmp	r3, r1
 8000718:	dd00      	ble.n	800071c <__aeabi_ddiv+0x2a4>
 800071a:	e71a      	b.n	8000552 <__aeabi_ddiv+0xda>
 800071c:	4659      	mov	r1, fp
 800071e:	08d2      	lsrs	r2, r2, #3
 8000720:	0749      	lsls	r1, r1, #29
 8000722:	4311      	orrs	r1, r2
 8000724:	465a      	mov	r2, fp
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	0254      	lsls	r4, r2, #9
 800072a:	4688      	mov	r8, r1
 800072c:	0b24      	lsrs	r4, r4, #12
 800072e:	0d5b      	lsrs	r3, r3, #21
 8000730:	e702      	b.n	8000538 <__aeabi_ddiv+0xc0>
 8000732:	465a      	mov	r2, fp
 8000734:	9b00      	ldr	r3, [sp, #0]
 8000736:	431a      	orrs	r2, r3
 8000738:	d100      	bne.n	800073c <__aeabi_ddiv+0x2c4>
 800073a:	e07e      	b.n	800083a <__aeabi_ddiv+0x3c2>
 800073c:	465b      	mov	r3, fp
 800073e:	2b00      	cmp	r3, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_ddiv+0x2cc>
 8000742:	e100      	b.n	8000946 <__aeabi_ddiv+0x4ce>
 8000744:	4658      	mov	r0, fp
 8000746:	f000 faab 	bl	8000ca0 <__clzsi2>
 800074a:	0002      	movs	r2, r0
 800074c:	0003      	movs	r3, r0
 800074e:	3a0b      	subs	r2, #11
 8000750:	271d      	movs	r7, #29
 8000752:	9e00      	ldr	r6, [sp, #0]
 8000754:	1aba      	subs	r2, r7, r2
 8000756:	0019      	movs	r1, r3
 8000758:	4658      	mov	r0, fp
 800075a:	40d6      	lsrs	r6, r2
 800075c:	3908      	subs	r1, #8
 800075e:	4088      	lsls	r0, r1
 8000760:	0032      	movs	r2, r6
 8000762:	4302      	orrs	r2, r0
 8000764:	4693      	mov	fp, r2
 8000766:	9a00      	ldr	r2, [sp, #0]
 8000768:	408a      	lsls	r2, r1
 800076a:	4928      	ldr	r1, [pc, #160]	@ (800080c <__aeabi_ddiv+0x394>)
 800076c:	4453      	add	r3, sl
 800076e:	468a      	mov	sl, r1
 8000770:	449a      	add	sl, r3
 8000772:	2300      	movs	r3, #0
 8000774:	e6c8      	b.n	8000508 <__aeabi_ddiv+0x90>
 8000776:	465b      	mov	r3, fp
 8000778:	4303      	orrs	r3, r0
 800077a:	4699      	mov	r9, r3
 800077c:	d056      	beq.n	800082c <__aeabi_ddiv+0x3b4>
 800077e:	465b      	mov	r3, fp
 8000780:	2b00      	cmp	r3, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_ddiv+0x30e>
 8000784:	e0cd      	b.n	8000922 <__aeabi_ddiv+0x4aa>
 8000786:	4658      	mov	r0, fp
 8000788:	f000 fa8a 	bl	8000ca0 <__clzsi2>
 800078c:	230b      	movs	r3, #11
 800078e:	425b      	negs	r3, r3
 8000790:	469c      	mov	ip, r3
 8000792:	0002      	movs	r2, r0
 8000794:	4484      	add	ip, r0
 8000796:	4666      	mov	r6, ip
 8000798:	231d      	movs	r3, #29
 800079a:	1b9b      	subs	r3, r3, r6
 800079c:	0026      	movs	r6, r4
 800079e:	0011      	movs	r1, r2
 80007a0:	4658      	mov	r0, fp
 80007a2:	40de      	lsrs	r6, r3
 80007a4:	3908      	subs	r1, #8
 80007a6:	4088      	lsls	r0, r1
 80007a8:	0033      	movs	r3, r6
 80007aa:	4303      	orrs	r3, r0
 80007ac:	4699      	mov	r9, r3
 80007ae:	0023      	movs	r3, r4
 80007b0:	408b      	lsls	r3, r1
 80007b2:	4698      	mov	r8, r3
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <__aeabi_ddiv+0x398>)
 80007b6:	2400      	movs	r4, #0
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	469a      	mov	sl, r3
 80007bc:	2300      	movs	r3, #0
 80007be:	9303      	str	r3, [sp, #12]
 80007c0:	e682      	b.n	80004c8 <__aeabi_ddiv+0x50>
 80007c2:	465a      	mov	r2, fp
 80007c4:	4302      	orrs	r2, r0
 80007c6:	4691      	mov	r9, r2
 80007c8:	d12a      	bne.n	8000820 <__aeabi_ddiv+0x3a8>
 80007ca:	2200      	movs	r2, #0
 80007cc:	469a      	mov	sl, r3
 80007ce:	2302      	movs	r3, #2
 80007d0:	4690      	mov	r8, r2
 80007d2:	2408      	movs	r4, #8
 80007d4:	9303      	str	r3, [sp, #12]
 80007d6:	e677      	b.n	80004c8 <__aeabi_ddiv+0x50>
 80007d8:	465a      	mov	r2, fp
 80007da:	9b00      	ldr	r3, [sp, #0]
 80007dc:	431a      	orrs	r2, r3
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <__aeabi_ddiv+0x39c>)
 80007e0:	469c      	mov	ip, r3
 80007e2:	44e2      	add	sl, ip
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d117      	bne.n	8000818 <__aeabi_ddiv+0x3a0>
 80007e8:	2302      	movs	r3, #2
 80007ea:	431c      	orrs	r4, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	469b      	mov	fp, r3
 80007f0:	3302      	adds	r3, #2
 80007f2:	e689      	b.n	8000508 <__aeabi_ddiv+0x90>
 80007f4:	000007ff 	.word	0x000007ff
 80007f8:	fffffc01 	.word	0xfffffc01
 80007fc:	08004948 	.word	0x08004948
 8000800:	000003ff 	.word	0x000003ff
 8000804:	feffffff 	.word	0xfeffffff
 8000808:	000007fe 	.word	0x000007fe
 800080c:	000003f3 	.word	0x000003f3
 8000810:	fffffc0d 	.word	0xfffffc0d
 8000814:	fffff801 	.word	0xfffff801
 8000818:	2303      	movs	r3, #3
 800081a:	0032      	movs	r2, r6
 800081c:	431c      	orrs	r4, r3
 800081e:	e673      	b.n	8000508 <__aeabi_ddiv+0x90>
 8000820:	469a      	mov	sl, r3
 8000822:	2303      	movs	r3, #3
 8000824:	46d9      	mov	r9, fp
 8000826:	240c      	movs	r4, #12
 8000828:	9303      	str	r3, [sp, #12]
 800082a:	e64d      	b.n	80004c8 <__aeabi_ddiv+0x50>
 800082c:	2300      	movs	r3, #0
 800082e:	4698      	mov	r8, r3
 8000830:	469a      	mov	sl, r3
 8000832:	3301      	adds	r3, #1
 8000834:	2404      	movs	r4, #4
 8000836:	9303      	str	r3, [sp, #12]
 8000838:	e646      	b.n	80004c8 <__aeabi_ddiv+0x50>
 800083a:	2301      	movs	r3, #1
 800083c:	431c      	orrs	r4, r3
 800083e:	2300      	movs	r3, #0
 8000840:	469b      	mov	fp, r3
 8000842:	3301      	adds	r3, #1
 8000844:	e660      	b.n	8000508 <__aeabi_ddiv+0x90>
 8000846:	2300      	movs	r3, #0
 8000848:	2480      	movs	r4, #128	@ 0x80
 800084a:	4698      	mov	r8, r3
 800084c:	2600      	movs	r6, #0
 800084e:	4b92      	ldr	r3, [pc, #584]	@ (8000a98 <__aeabi_ddiv+0x620>)
 8000850:	0324      	lsls	r4, r4, #12
 8000852:	e671      	b.n	8000538 <__aeabi_ddiv+0xc0>
 8000854:	2201      	movs	r2, #1
 8000856:	4252      	negs	r2, r2
 8000858:	2101      	movs	r1, #1
 800085a:	1ac9      	subs	r1, r1, r3
 800085c:	2938      	cmp	r1, #56	@ 0x38
 800085e:	dd00      	ble.n	8000862 <__aeabi_ddiv+0x3ea>
 8000860:	e666      	b.n	8000530 <__aeabi_ddiv+0xb8>
 8000862:	291f      	cmp	r1, #31
 8000864:	dc00      	bgt.n	8000868 <__aeabi_ddiv+0x3f0>
 8000866:	e0ab      	b.n	80009c0 <__aeabi_ddiv+0x548>
 8000868:	201f      	movs	r0, #31
 800086a:	4240      	negs	r0, r0
 800086c:	1ac3      	subs	r3, r0, r3
 800086e:	4658      	mov	r0, fp
 8000870:	40d8      	lsrs	r0, r3
 8000872:	0003      	movs	r3, r0
 8000874:	2920      	cmp	r1, #32
 8000876:	d004      	beq.n	8000882 <__aeabi_ddiv+0x40a>
 8000878:	4658      	mov	r0, fp
 800087a:	4988      	ldr	r1, [pc, #544]	@ (8000a9c <__aeabi_ddiv+0x624>)
 800087c:	4451      	add	r1, sl
 800087e:	4088      	lsls	r0, r1
 8000880:	4302      	orrs	r2, r0
 8000882:	1e51      	subs	r1, r2, #1
 8000884:	418a      	sbcs	r2, r1
 8000886:	431a      	orrs	r2, r3
 8000888:	2307      	movs	r3, #7
 800088a:	0019      	movs	r1, r3
 800088c:	2400      	movs	r4, #0
 800088e:	4011      	ands	r1, r2
 8000890:	4213      	tst	r3, r2
 8000892:	d00c      	beq.n	80008ae <__aeabi_ddiv+0x436>
 8000894:	230f      	movs	r3, #15
 8000896:	4013      	ands	r3, r2
 8000898:	2b04      	cmp	r3, #4
 800089a:	d100      	bne.n	800089e <__aeabi_ddiv+0x426>
 800089c:	e0f9      	b.n	8000a92 <__aeabi_ddiv+0x61a>
 800089e:	1d11      	adds	r1, r2, #4
 80008a0:	4291      	cmp	r1, r2
 80008a2:	419b      	sbcs	r3, r3
 80008a4:	000a      	movs	r2, r1
 80008a6:	425b      	negs	r3, r3
 80008a8:	0759      	lsls	r1, r3, #29
 80008aa:	025b      	lsls	r3, r3, #9
 80008ac:	0b1c      	lsrs	r4, r3, #12
 80008ae:	08d2      	lsrs	r2, r2, #3
 80008b0:	430a      	orrs	r2, r1
 80008b2:	4690      	mov	r8, r2
 80008b4:	2300      	movs	r3, #0
 80008b6:	e63f      	b.n	8000538 <__aeabi_ddiv+0xc0>
 80008b8:	2480      	movs	r4, #128	@ 0x80
 80008ba:	464b      	mov	r3, r9
 80008bc:	0324      	lsls	r4, r4, #12
 80008be:	4223      	tst	r3, r4
 80008c0:	d009      	beq.n	80008d6 <__aeabi_ddiv+0x45e>
 80008c2:	465b      	mov	r3, fp
 80008c4:	4223      	tst	r3, r4
 80008c6:	d106      	bne.n	80008d6 <__aeabi_ddiv+0x45e>
 80008c8:	431c      	orrs	r4, r3
 80008ca:	0324      	lsls	r4, r4, #12
 80008cc:	002e      	movs	r6, r5
 80008ce:	4690      	mov	r8, r2
 80008d0:	4b71      	ldr	r3, [pc, #452]	@ (8000a98 <__aeabi_ddiv+0x620>)
 80008d2:	0b24      	lsrs	r4, r4, #12
 80008d4:	e630      	b.n	8000538 <__aeabi_ddiv+0xc0>
 80008d6:	2480      	movs	r4, #128	@ 0x80
 80008d8:	464b      	mov	r3, r9
 80008da:	0324      	lsls	r4, r4, #12
 80008dc:	431c      	orrs	r4, r3
 80008de:	0324      	lsls	r4, r4, #12
 80008e0:	9e02      	ldr	r6, [sp, #8]
 80008e2:	4b6d      	ldr	r3, [pc, #436]	@ (8000a98 <__aeabi_ddiv+0x620>)
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	e627      	b.n	8000538 <__aeabi_ddiv+0xc0>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_ddiv+0x476>
 80008ec:	e700      	b.n	80006f0 <__aeabi_ddiv+0x278>
 80008ee:	9800      	ldr	r0, [sp, #0]
 80008f0:	1e51      	subs	r1, r2, #1
 80008f2:	4684      	mov	ip, r0
 80008f4:	4464      	add	r4, ip
 80008f6:	4284      	cmp	r4, r0
 80008f8:	d200      	bcs.n	80008fc <__aeabi_ddiv+0x484>
 80008fa:	e084      	b.n	8000a06 <__aeabi_ddiv+0x58e>
 80008fc:	42bc      	cmp	r4, r7
 80008fe:	d200      	bcs.n	8000902 <__aeabi_ddiv+0x48a>
 8000900:	e0ae      	b.n	8000a60 <__aeabi_ddiv+0x5e8>
 8000902:	d100      	bne.n	8000906 <__aeabi_ddiv+0x48e>
 8000904:	e0c1      	b.n	8000a8a <__aeabi_ddiv+0x612>
 8000906:	000a      	movs	r2, r1
 8000908:	e6f0      	b.n	80006ec <__aeabi_ddiv+0x274>
 800090a:	4542      	cmp	r2, r8
 800090c:	d900      	bls.n	8000910 <__aeabi_ddiv+0x498>
 800090e:	e62c      	b.n	800056a <__aeabi_ddiv+0xf2>
 8000910:	464b      	mov	r3, r9
 8000912:	07dc      	lsls	r4, r3, #31
 8000914:	0858      	lsrs	r0, r3, #1
 8000916:	4643      	mov	r3, r8
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	431c      	orrs	r4, r3
 800091c:	4643      	mov	r3, r8
 800091e:	07df      	lsls	r7, r3, #31
 8000920:	e62a      	b.n	8000578 <__aeabi_ddiv+0x100>
 8000922:	f000 f9bd 	bl	8000ca0 <__clzsi2>
 8000926:	2315      	movs	r3, #21
 8000928:	469c      	mov	ip, r3
 800092a:	4484      	add	ip, r0
 800092c:	0002      	movs	r2, r0
 800092e:	4663      	mov	r3, ip
 8000930:	3220      	adds	r2, #32
 8000932:	2b1c      	cmp	r3, #28
 8000934:	dc00      	bgt.n	8000938 <__aeabi_ddiv+0x4c0>
 8000936:	e72e      	b.n	8000796 <__aeabi_ddiv+0x31e>
 8000938:	0023      	movs	r3, r4
 800093a:	3808      	subs	r0, #8
 800093c:	4083      	lsls	r3, r0
 800093e:	4699      	mov	r9, r3
 8000940:	2300      	movs	r3, #0
 8000942:	4698      	mov	r8, r3
 8000944:	e736      	b.n	80007b4 <__aeabi_ddiv+0x33c>
 8000946:	f000 f9ab 	bl	8000ca0 <__clzsi2>
 800094a:	0002      	movs	r2, r0
 800094c:	0003      	movs	r3, r0
 800094e:	3215      	adds	r2, #21
 8000950:	3320      	adds	r3, #32
 8000952:	2a1c      	cmp	r2, #28
 8000954:	dc00      	bgt.n	8000958 <__aeabi_ddiv+0x4e0>
 8000956:	e6fb      	b.n	8000750 <__aeabi_ddiv+0x2d8>
 8000958:	9900      	ldr	r1, [sp, #0]
 800095a:	3808      	subs	r0, #8
 800095c:	4081      	lsls	r1, r0
 800095e:	2200      	movs	r2, #0
 8000960:	468b      	mov	fp, r1
 8000962:	e702      	b.n	800076a <__aeabi_ddiv+0x2f2>
 8000964:	9900      	ldr	r1, [sp, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	468c      	mov	ip, r1
 800096a:	4464      	add	r4, ip
 800096c:	42a1      	cmp	r1, r4
 800096e:	d900      	bls.n	8000972 <__aeabi_ddiv+0x4fa>
 8000970:	e69a      	b.n	80006a8 <__aeabi_ddiv+0x230>
 8000972:	42a2      	cmp	r2, r4
 8000974:	d800      	bhi.n	8000978 <__aeabi_ddiv+0x500>
 8000976:	e697      	b.n	80006a8 <__aeabi_ddiv+0x230>
 8000978:	1e83      	subs	r3, r0, #2
 800097a:	4464      	add	r4, ip
 800097c:	e694      	b.n	80006a8 <__aeabi_ddiv+0x230>
 800097e:	46ac      	mov	ip, r5
 8000980:	4461      	add	r1, ip
 8000982:	3f01      	subs	r7, #1
 8000984:	428d      	cmp	r5, r1
 8000986:	d900      	bls.n	800098a <__aeabi_ddiv+0x512>
 8000988:	e680      	b.n	800068c <__aeabi_ddiv+0x214>
 800098a:	428a      	cmp	r2, r1
 800098c:	d800      	bhi.n	8000990 <__aeabi_ddiv+0x518>
 800098e:	e67d      	b.n	800068c <__aeabi_ddiv+0x214>
 8000990:	1e87      	subs	r7, r0, #2
 8000992:	4461      	add	r1, ip
 8000994:	e67a      	b.n	800068c <__aeabi_ddiv+0x214>
 8000996:	4285      	cmp	r5, r0
 8000998:	d000      	beq.n	800099c <__aeabi_ddiv+0x524>
 800099a:	e65f      	b.n	800065c <__aeabi_ddiv+0x1e4>
 800099c:	45b9      	cmp	r9, r7
 800099e:	d900      	bls.n	80009a2 <__aeabi_ddiv+0x52a>
 80009a0:	e65c      	b.n	800065c <__aeabi_ddiv+0x1e4>
 80009a2:	e656      	b.n	8000652 <__aeabi_ddiv+0x1da>
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d800      	bhi.n	80009aa <__aeabi_ddiv+0x532>
 80009a8:	e61a      	b.n	80005e0 <__aeabi_ddiv+0x168>
 80009aa:	1e83      	subs	r3, r0, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	e617      	b.n	80005e0 <__aeabi_ddiv+0x168>
 80009b0:	428a      	cmp	r2, r1
 80009b2:	d800      	bhi.n	80009b6 <__aeabi_ddiv+0x53e>
 80009b4:	e600      	b.n	80005b8 <__aeabi_ddiv+0x140>
 80009b6:	46ac      	mov	ip, r5
 80009b8:	1e83      	subs	r3, r0, #2
 80009ba:	4698      	mov	r8, r3
 80009bc:	4461      	add	r1, ip
 80009be:	e5fb      	b.n	80005b8 <__aeabi_ddiv+0x140>
 80009c0:	4837      	ldr	r0, [pc, #220]	@ (8000aa0 <__aeabi_ddiv+0x628>)
 80009c2:	0014      	movs	r4, r2
 80009c4:	4450      	add	r0, sl
 80009c6:	4082      	lsls	r2, r0
 80009c8:	465b      	mov	r3, fp
 80009ca:	0017      	movs	r7, r2
 80009cc:	4083      	lsls	r3, r0
 80009ce:	40cc      	lsrs	r4, r1
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	4197      	sbcs	r7, r2
 80009d4:	4323      	orrs	r3, r4
 80009d6:	433b      	orrs	r3, r7
 80009d8:	001a      	movs	r2, r3
 80009da:	465b      	mov	r3, fp
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	0751      	lsls	r1, r2, #29
 80009e0:	d009      	beq.n	80009f6 <__aeabi_ddiv+0x57e>
 80009e2:	210f      	movs	r1, #15
 80009e4:	4011      	ands	r1, r2
 80009e6:	2904      	cmp	r1, #4
 80009e8:	d005      	beq.n	80009f6 <__aeabi_ddiv+0x57e>
 80009ea:	1d11      	adds	r1, r2, #4
 80009ec:	4291      	cmp	r1, r2
 80009ee:	4192      	sbcs	r2, r2
 80009f0:	4252      	negs	r2, r2
 80009f2:	189b      	adds	r3, r3, r2
 80009f4:	000a      	movs	r2, r1
 80009f6:	0219      	lsls	r1, r3, #8
 80009f8:	d400      	bmi.n	80009fc <__aeabi_ddiv+0x584>
 80009fa:	e755      	b.n	80008a8 <__aeabi_ddiv+0x430>
 80009fc:	2200      	movs	r2, #0
 80009fe:	2301      	movs	r3, #1
 8000a00:	2400      	movs	r4, #0
 8000a02:	4690      	mov	r8, r2
 8000a04:	e598      	b.n	8000538 <__aeabi_ddiv+0xc0>
 8000a06:	000a      	movs	r2, r1
 8000a08:	42bc      	cmp	r4, r7
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_ddiv+0x596>
 8000a0c:	e66e      	b.n	80006ec <__aeabi_ddiv+0x274>
 8000a0e:	454b      	cmp	r3, r9
 8000a10:	d000      	beq.n	8000a14 <__aeabi_ddiv+0x59c>
 8000a12:	e66b      	b.n	80006ec <__aeabi_ddiv+0x274>
 8000a14:	e66c      	b.n	80006f0 <__aeabi_ddiv+0x278>
 8000a16:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <__aeabi_ddiv+0x62c>)
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <__aeabi_ddiv+0x630>)
 8000a1a:	4453      	add	r3, sl
 8000a1c:	4592      	cmp	sl, r2
 8000a1e:	da00      	bge.n	8000a22 <__aeabi_ddiv+0x5aa>
 8000a20:	e718      	b.n	8000854 <__aeabi_ddiv+0x3dc>
 8000a22:	2101      	movs	r1, #1
 8000a24:	4249      	negs	r1, r1
 8000a26:	1d0a      	adds	r2, r1, #4
 8000a28:	428a      	cmp	r2, r1
 8000a2a:	4189      	sbcs	r1, r1
 8000a2c:	4249      	negs	r1, r1
 8000a2e:	448b      	add	fp, r1
 8000a30:	e666      	b.n	8000700 <__aeabi_ddiv+0x288>
 8000a32:	210f      	movs	r1, #15
 8000a34:	4011      	ands	r1, r2
 8000a36:	2904      	cmp	r1, #4
 8000a38:	d100      	bne.n	8000a3c <__aeabi_ddiv+0x5c4>
 8000a3a:	e661      	b.n	8000700 <__aeabi_ddiv+0x288>
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	e7f2      	b.n	8000a26 <__aeabi_ddiv+0x5ae>
 8000a40:	42bc      	cmp	r4, r7
 8000a42:	d800      	bhi.n	8000a46 <__aeabi_ddiv+0x5ce>
 8000a44:	e60a      	b.n	800065c <__aeabi_ddiv+0x1e4>
 8000a46:	2302      	movs	r3, #2
 8000a48:	425b      	negs	r3, r3
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	9900      	ldr	r1, [sp, #0]
 8000a4e:	444f      	add	r7, r9
 8000a50:	454f      	cmp	r7, r9
 8000a52:	419b      	sbcs	r3, r3
 8000a54:	44e3      	add	fp, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	425b      	negs	r3, r3
 8000a5a:	4463      	add	r3, ip
 8000a5c:	18c0      	adds	r0, r0, r3
 8000a5e:	e5ff      	b.n	8000660 <__aeabi_ddiv+0x1e8>
 8000a60:	4649      	mov	r1, r9
 8000a62:	9d00      	ldr	r5, [sp, #0]
 8000a64:	0048      	lsls	r0, r1, #1
 8000a66:	4548      	cmp	r0, r9
 8000a68:	4189      	sbcs	r1, r1
 8000a6a:	46ac      	mov	ip, r5
 8000a6c:	4249      	negs	r1, r1
 8000a6e:	4461      	add	r1, ip
 8000a70:	4681      	mov	r9, r0
 8000a72:	3a02      	subs	r2, #2
 8000a74:	1864      	adds	r4, r4, r1
 8000a76:	e7c7      	b.n	8000a08 <__aeabi_ddiv+0x590>
 8000a78:	2480      	movs	r4, #128	@ 0x80
 8000a7a:	465b      	mov	r3, fp
 8000a7c:	0324      	lsls	r4, r4, #12
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	0324      	lsls	r4, r4, #12
 8000a82:	4690      	mov	r8, r2
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__aeabi_ddiv+0x620>)
 8000a86:	0b24      	lsrs	r4, r4, #12
 8000a88:	e556      	b.n	8000538 <__aeabi_ddiv+0xc0>
 8000a8a:	4599      	cmp	r9, r3
 8000a8c:	d3e8      	bcc.n	8000a60 <__aeabi_ddiv+0x5e8>
 8000a8e:	000a      	movs	r2, r1
 8000a90:	e7bd      	b.n	8000a0e <__aeabi_ddiv+0x596>
 8000a92:	2300      	movs	r3, #0
 8000a94:	e708      	b.n	80008a8 <__aeabi_ddiv+0x430>
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	000007ff 	.word	0x000007ff
 8000a9c:	0000043e 	.word	0x0000043e
 8000aa0:	0000041e 	.word	0x0000041e
 8000aa4:	000003ff 	.word	0x000003ff
 8000aa8:	fffffc02 	.word	0xfffffc02

08000aac <__aeabi_i2d>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d016      	beq.n	8000ae0 <__aeabi_i2d+0x34>
 8000ab2:	17c3      	asrs	r3, r0, #31
 8000ab4:	18c5      	adds	r5, r0, r3
 8000ab6:	405d      	eors	r5, r3
 8000ab8:	0fc4      	lsrs	r4, r0, #31
 8000aba:	0028      	movs	r0, r5
 8000abc:	f000 f8f0 	bl	8000ca0 <__clzsi2>
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <__aeabi_i2d+0x58>)
 8000ac2:	1a1b      	subs	r3, r3, r0
 8000ac4:	055b      	lsls	r3, r3, #21
 8000ac6:	0d5b      	lsrs	r3, r3, #21
 8000ac8:	280a      	cmp	r0, #10
 8000aca:	dc14      	bgt.n	8000af6 <__aeabi_i2d+0x4a>
 8000acc:	0002      	movs	r2, r0
 8000ace:	002e      	movs	r6, r5
 8000ad0:	3215      	adds	r2, #21
 8000ad2:	4096      	lsls	r6, r2
 8000ad4:	220b      	movs	r2, #11
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	40d5      	lsrs	r5, r2
 8000ada:	032d      	lsls	r5, r5, #12
 8000adc:	0b2d      	lsrs	r5, r5, #12
 8000ade:	e003      	b.n	8000ae8 <__aeabi_i2d+0x3c>
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	051b      	lsls	r3, r3, #20
 8000aea:	432b      	orrs	r3, r5
 8000aec:	07e4      	lsls	r4, r4, #31
 8000aee:	4323      	orrs	r3, r4
 8000af0:	0030      	movs	r0, r6
 8000af2:	0019      	movs	r1, r3
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	380b      	subs	r0, #11
 8000af8:	4085      	lsls	r5, r0
 8000afa:	032d      	lsls	r5, r5, #12
 8000afc:	2600      	movs	r6, #0
 8000afe:	0b2d      	lsrs	r5, r5, #12
 8000b00:	e7f2      	b.n	8000ae8 <__aeabi_i2d+0x3c>
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	0000041e 	.word	0x0000041e

08000b08 <__aeabi_f2d>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	0043      	lsls	r3, r0, #1
 8000b0e:	0fc4      	lsrs	r4, r0, #31
 8000b10:	20fe      	movs	r0, #254	@ 0xfe
 8000b12:	0e1b      	lsrs	r3, r3, #24
 8000b14:	1c59      	adds	r1, r3, #1
 8000b16:	0a55      	lsrs	r5, r2, #9
 8000b18:	4208      	tst	r0, r1
 8000b1a:	d00c      	beq.n	8000b36 <__aeabi_f2d+0x2e>
 8000b1c:	21e0      	movs	r1, #224	@ 0xe0
 8000b1e:	0089      	lsls	r1, r1, #2
 8000b20:	468c      	mov	ip, r1
 8000b22:	076d      	lsls	r5, r5, #29
 8000b24:	0b12      	lsrs	r2, r2, #12
 8000b26:	4463      	add	r3, ip
 8000b28:	051b      	lsls	r3, r3, #20
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	07e4      	lsls	r4, r4, #31
 8000b2e:	4323      	orrs	r3, r4
 8000b30:	0028      	movs	r0, r5
 8000b32:	0019      	movs	r1, r3
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d114      	bne.n	8000b64 <__aeabi_f2d+0x5c>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d01b      	beq.n	8000b76 <__aeabi_f2d+0x6e>
 8000b3e:	0028      	movs	r0, r5
 8000b40:	f000 f8ae 	bl	8000ca0 <__clzsi2>
 8000b44:	280a      	cmp	r0, #10
 8000b46:	dc1c      	bgt.n	8000b82 <__aeabi_f2d+0x7a>
 8000b48:	230b      	movs	r3, #11
 8000b4a:	002a      	movs	r2, r5
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	40da      	lsrs	r2, r3
 8000b50:	0003      	movs	r3, r0
 8000b52:	3315      	adds	r3, #21
 8000b54:	409d      	lsls	r5, r3
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <__aeabi_f2d+0x88>)
 8000b58:	0312      	lsls	r2, r2, #12
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	055b      	lsls	r3, r3, #21
 8000b5e:	0b12      	lsrs	r2, r2, #12
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	e7e1      	b.n	8000b28 <__aeabi_f2d+0x20>
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d009      	beq.n	8000b7c <__aeabi_f2d+0x74>
 8000b68:	0b13      	lsrs	r3, r2, #12
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	0312      	lsls	r2, r2, #12
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	076d      	lsls	r5, r5, #29
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <__aeabi_f2d+0x8c>)
 8000b74:	e7d8      	b.n	8000b28 <__aeabi_f2d+0x20>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e7d5      	b.n	8000b28 <__aeabi_f2d+0x20>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <__aeabi_f2d+0x8c>)
 8000b80:	e7d2      	b.n	8000b28 <__aeabi_f2d+0x20>
 8000b82:	0003      	movs	r3, r0
 8000b84:	002a      	movs	r2, r5
 8000b86:	3b0b      	subs	r3, #11
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e7e3      	b.n	8000b56 <__aeabi_f2d+0x4e>
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	00000389 	.word	0x00000389
 8000b94:	000007ff 	.word	0x000007ff

08000b98 <__aeabi_d2f>:
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	004b      	lsls	r3, r1, #1
 8000b9c:	030f      	lsls	r7, r1, #12
 8000b9e:	0d5b      	lsrs	r3, r3, #21
 8000ba0:	4c3b      	ldr	r4, [pc, #236]	@ (8000c90 <__aeabi_d2f+0xf8>)
 8000ba2:	0f45      	lsrs	r5, r0, #29
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	0a7f      	lsrs	r7, r7, #9
 8000ba8:	1c5e      	adds	r6, r3, #1
 8000baa:	432f      	orrs	r7, r5
 8000bac:	9000      	str	r0, [sp, #0]
 8000bae:	9101      	str	r1, [sp, #4]
 8000bb0:	0fca      	lsrs	r2, r1, #31
 8000bb2:	00c5      	lsls	r5, r0, #3
 8000bb4:	4226      	tst	r6, r4
 8000bb6:	d00b      	beq.n	8000bd0 <__aeabi_d2f+0x38>
 8000bb8:	4936      	ldr	r1, [pc, #216]	@ (8000c94 <__aeabi_d2f+0xfc>)
 8000bba:	185c      	adds	r4, r3, r1
 8000bbc:	2cfe      	cmp	r4, #254	@ 0xfe
 8000bbe:	dd13      	ble.n	8000be8 <__aeabi_d2f+0x50>
 8000bc0:	20ff      	movs	r0, #255	@ 0xff
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	05c0      	lsls	r0, r0, #23
 8000bc6:	4318      	orrs	r0, r3
 8000bc8:	07d2      	lsls	r2, r2, #31
 8000bca:	4310      	orrs	r0, r2
 8000bcc:	b003      	add	sp, #12
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2f+0x42>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e7f4      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000bda:	433d      	orrs	r5, r7
 8000bdc:	d0f0      	beq.n	8000bc0 <__aeabi_d2f+0x28>
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	03db      	lsls	r3, r3, #15
 8000be2:	20ff      	movs	r0, #255	@ 0xff
 8000be4:	433b      	orrs	r3, r7
 8000be6:	e7ed      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	dd14      	ble.n	8000c16 <__aeabi_d2f+0x7e>
 8000bec:	9b00      	ldr	r3, [sp, #0]
 8000bee:	00ff      	lsls	r7, r7, #3
 8000bf0:	019b      	lsls	r3, r3, #6
 8000bf2:	1e58      	subs	r0, r3, #1
 8000bf4:	4183      	sbcs	r3, r0
 8000bf6:	0f69      	lsrs	r1, r5, #29
 8000bf8:	433b      	orrs	r3, r7
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	0759      	lsls	r1, r3, #29
 8000bfe:	d041      	beq.n	8000c84 <__aeabi_d2f+0xec>
 8000c00:	210f      	movs	r1, #15
 8000c02:	4019      	ands	r1, r3
 8000c04:	2904      	cmp	r1, #4
 8000c06:	d028      	beq.n	8000c5a <__aeabi_d2f+0xc2>
 8000c08:	3304      	adds	r3, #4
 8000c0a:	0159      	lsls	r1, r3, #5
 8000c0c:	d525      	bpl.n	8000c5a <__aeabi_d2f+0xc2>
 8000c0e:	3401      	adds	r4, #1
 8000c10:	2300      	movs	r3, #0
 8000c12:	b2e0      	uxtb	r0, r4
 8000c14:	e7d6      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000c16:	0021      	movs	r1, r4
 8000c18:	3117      	adds	r1, #23
 8000c1a:	dbdb      	blt.n	8000bd4 <__aeabi_d2f+0x3c>
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	201e      	movs	r0, #30
 8000c20:	0409      	lsls	r1, r1, #16
 8000c22:	4339      	orrs	r1, r7
 8000c24:	1b00      	subs	r0, r0, r4
 8000c26:	281f      	cmp	r0, #31
 8000c28:	dd1b      	ble.n	8000c62 <__aeabi_d2f+0xca>
 8000c2a:	2602      	movs	r6, #2
 8000c2c:	4276      	negs	r6, r6
 8000c2e:	1b34      	subs	r4, r6, r4
 8000c30:	000e      	movs	r6, r1
 8000c32:	40e6      	lsrs	r6, r4
 8000c34:	0034      	movs	r4, r6
 8000c36:	2820      	cmp	r0, #32
 8000c38:	d004      	beq.n	8000c44 <__aeabi_d2f+0xac>
 8000c3a:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <__aeabi_d2f+0x100>)
 8000c3c:	4684      	mov	ip, r0
 8000c3e:	4463      	add	r3, ip
 8000c40:	4099      	lsls	r1, r3
 8000c42:	430d      	orrs	r5, r1
 8000c44:	002b      	movs	r3, r5
 8000c46:	1e59      	subs	r1, r3, #1
 8000c48:	418b      	sbcs	r3, r1
 8000c4a:	4323      	orrs	r3, r4
 8000c4c:	0759      	lsls	r1, r3, #29
 8000c4e:	d015      	beq.n	8000c7c <__aeabi_d2f+0xe4>
 8000c50:	210f      	movs	r1, #15
 8000c52:	2400      	movs	r4, #0
 8000c54:	4019      	ands	r1, r3
 8000c56:	2904      	cmp	r1, #4
 8000c58:	d117      	bne.n	8000c8a <__aeabi_d2f+0xf2>
 8000c5a:	019b      	lsls	r3, r3, #6
 8000c5c:	0a5b      	lsrs	r3, r3, #9
 8000c5e:	b2e0      	uxtb	r0, r4
 8000c60:	e7b0      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000c62:	4c0e      	ldr	r4, [pc, #56]	@ (8000c9c <__aeabi_d2f+0x104>)
 8000c64:	191c      	adds	r4, r3, r4
 8000c66:	002b      	movs	r3, r5
 8000c68:	40a5      	lsls	r5, r4
 8000c6a:	40c3      	lsrs	r3, r0
 8000c6c:	40a1      	lsls	r1, r4
 8000c6e:	1e68      	subs	r0, r5, #1
 8000c70:	4185      	sbcs	r5, r0
 8000c72:	4329      	orrs	r1, r5
 8000c74:	430b      	orrs	r3, r1
 8000c76:	2400      	movs	r4, #0
 8000c78:	0759      	lsls	r1, r3, #29
 8000c7a:	d1c1      	bne.n	8000c00 <__aeabi_d2f+0x68>
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	2000      	movs	r0, #0
 8000c80:	0a5b      	lsrs	r3, r3, #9
 8000c82:	e79f      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	b2e0      	uxtb	r0, r4
 8000c88:	e79c      	b.n	8000bc4 <__aeabi_d2f+0x2c>
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	e7e5      	b.n	8000c5a <__aeabi_d2f+0xc2>
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	000007fe 	.word	0x000007fe
 8000c94:	fffffc80 	.word	0xfffffc80
 8000c98:	fffffca2 	.word	0xfffffca2
 8000c9c:	fffffc82 	.word	0xfffffc82

08000ca0 <__clzsi2>:
 8000ca0:	211c      	movs	r1, #28
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d301      	bcc.n	8000cae <__clzsi2+0xe>
 8000caa:	0c00      	lsrs	r0, r0, #16
 8000cac:	3910      	subs	r1, #16
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d301      	bcc.n	8000cb8 <__clzsi2+0x18>
 8000cb4:	0a00      	lsrs	r0, r0, #8
 8000cb6:	3908      	subs	r1, #8
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d301      	bcc.n	8000cc2 <__clzsi2+0x22>
 8000cbe:	0900      	lsrs	r0, r0, #4
 8000cc0:	3904      	subs	r1, #4
 8000cc2:	a202      	add	r2, pc, #8	@ (adr r2, 8000ccc <__clzsi2+0x2c>)
 8000cc4:	5c10      	ldrb	r0, [r2, r0]
 8000cc6:	1840      	adds	r0, r0, r1
 8000cc8:	4770      	bx	lr
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	02020304 	.word	0x02020304
 8000cd0:	01010101 	.word	0x01010101
	...

08000cdc <__clzdi2>:
 8000cdc:	b510      	push	{r4, lr}
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d103      	bne.n	8000cea <__clzdi2+0xe>
 8000ce2:	f7ff ffdd 	bl	8000ca0 <__clzsi2>
 8000ce6:	3020      	adds	r0, #32
 8000ce8:	e002      	b.n	8000cf0 <__clzdi2+0x14>
 8000cea:	0008      	movs	r0, r1
 8000cec:	f7ff ffd8 	bl	8000ca0 <__clzsi2>
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)

08000cf4 <MPU6050_init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000cfa:	482a      	ldr	r0, [pc, #168]	@ (8000da4 <MPU6050_init+0xb0>)
 8000cfc:	23fa      	movs	r3, #250	@ 0xfa
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2275      	movs	r2, #117	@ 0x75
 8000d0e:	21d0      	movs	r1, #208	@ 0xd0
 8000d10:	f001 f874 	bl	8001dfc <HAL_I2C_Mem_Read>
	if (check == 104)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b68      	cmp	r3, #104	@ 0x68
 8000d1a:	d13f      	bne.n	8000d9c <MPU6050_init+0xa8>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8000d22:	4820      	ldr	r0, [pc, #128]	@ (8000da4 <MPU6050_init+0xb0>)
 8000d24:	23fa      	movs	r3, #250	@ 0xfa
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	1dbb      	adds	r3, r7, #6
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	226b      	movs	r2, #107	@ 0x6b
 8000d36:	21d0      	movs	r1, #208	@ 0xd0
 8000d38:	f000 ff32 	bl	8001ba0 <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8000d3c:	1dbb      	adds	r3, r7, #6
 8000d3e:	2207      	movs	r2, #7
 8000d40:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8000d42:	4818      	ldr	r0, [pc, #96]	@ (8000da4 <MPU6050_init+0xb0>)
 8000d44:	23fa      	movs	r3, #250	@ 0xfa
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	1dbb      	adds	r3, r7, #6
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	2219      	movs	r2, #25
 8000d56:	21d0      	movs	r1, #208	@ 0xd0
 8000d58:	f000 ff22 	bl	8001ba0 <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8000d62:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <MPU6050_init+0xb0>)
 8000d64:	23fa      	movs	r3, #250	@ 0xfa
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	1dbb      	adds	r3, r7, #6
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	221c      	movs	r2, #28
 8000d76:	21d0      	movs	r1, #208	@ 0xd0
 8000d78:	f000 ff12 	bl	8001ba0 <HAL_I2C_Mem_Write>

		data = 0x00;
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8000d82:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <MPU6050_init+0xb0>)
 8000d84:	23fa      	movs	r3, #250	@ 0xfa
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	221b      	movs	r2, #27
 8000d96:	21d0      	movs	r1, #208	@ 0xd0
 8000d98:	f000 ff02 	bl	8001ba0 <HAL_I2C_Mem_Write>
	else{
		while(1){}
	}
	*/

}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000080 	.word	0x20000080

08000da8 <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b08b      	sub	sp, #44	@ 0x2c
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000db4:	483a      	ldr	r0, [pc, #232]	@ (8000ea0 <MPU6050_Read_Accel+0xf8>)
 8000db6:	23fa      	movs	r3, #250	@ 0xfa
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2410      	movs	r4, #16
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	223b      	movs	r2, #59	@ 0x3b
 8000dca:	21d0      	movs	r1, #208	@ 0xd0
 8000dcc:	f001 f816 	bl	8001dfc <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000dd0:	0021      	movs	r1, r4
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <MPU6050_Read_Accel+0xfc>)
 8000de6:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	78db      	ldrb	r3, [r3, #3]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <MPU6050_Read_Accel+0x100>)
 8000dfc:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <MPU6050_Read_Accel+0x104>)
 8000e12:	801a      	strh	r2, [r3, #0]

	*Ax = Accel_X_RAW*100/16384.0;
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MPU6050_Read_Accel+0xfc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	5e9b      	ldrsh	r3, [r3, r2]
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	4353      	muls	r3, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fe43 	bl	8000aac <__aeabi_i2d>
 8000e26:	2200      	movs	r2, #0
 8000e28:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MPU6050_Read_Accel+0x108>)
 8000e2a:	f7ff fb25 	bl	8000478 <__aeabi_ddiv>
 8000e2e:	0002      	movs	r2, r0
 8000e30:	000b      	movs	r3, r1
 8000e32:	0010      	movs	r0, r2
 8000e34:	0019      	movs	r1, r3
 8000e36:	f7ff feaf 	bl	8000b98 <__aeabi_d2f>
 8000e3a:	1c02      	adds	r2, r0, #0
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MPU6050_Read_Accel+0x100>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	5e9b      	ldrsh	r3, [r3, r2]
 8000e46:	001a      	movs	r2, r3
 8000e48:	2364      	movs	r3, #100	@ 0x64
 8000e4a:	4353      	muls	r3, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fe2d 	bl	8000aac <__aeabi_i2d>
 8000e52:	2200      	movs	r2, #0
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MPU6050_Read_Accel+0x108>)
 8000e56:	f7ff fb0f 	bl	8000478 <__aeabi_ddiv>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	0010      	movs	r0, r2
 8000e60:	0019      	movs	r1, r3
 8000e62:	f7ff fe99 	bl	8000b98 <__aeabi_d2f>
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MPU6050_Read_Accel+0x104>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	5e9b      	ldrsh	r3, [r3, r2]
 8000e72:	001a      	movs	r2, r3
 8000e74:	2364      	movs	r3, #100	@ 0x64
 8000e76:	4353      	muls	r3, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff fe17 	bl	8000aac <__aeabi_i2d>
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <MPU6050_Read_Accel+0x108>)
 8000e82:	f7ff faf9 	bl	8000478 <__aeabi_ddiv>
 8000e86:	0002      	movs	r2, r0
 8000e88:	000b      	movs	r3, r1
 8000e8a:	0010      	movs	r0, r2
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	f7ff fe83 	bl	8000b98 <__aeabi_d2f>
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b007      	add	sp, #28
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	20000080 	.word	0x20000080
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	2000007a 	.word	0x2000007a
 8000eac:	2000007c 	.word	0x2000007c
 8000eb0:	40d00000 	.word	0x40d00000

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b091      	sub	sp, #68	@ 0x44
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 faed 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f87b 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f95d 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f8eb 	bl	80010a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eca:	f000 f929 	bl	8001120 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  float Ax, Ay, Az, Gx, Gy, Gz;
  char buf[20];
  MPU6050_init();
 8000ece:	f7ff ff11 	bl	8000cf4 <MPU6050_init>

  char hello[] = "\n\rHello, World!\n\r";
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	4a35      	ldr	r2, [pc, #212]	@ (8000fac <main+0xf8>)
 8000ed6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ed8:	c313      	stmia	r3!, {r0, r1, r4}
 8000eda:	6811      	ldr	r1, [r2, #0]
 8000edc:	6019      	str	r1, [r3, #0]
 8000ede:	8892      	ldrh	r2, [r2, #4]
 8000ee0:	809a      	strh	r2, [r3, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MPU6050_Read_Accel(&Ax, &Ay, &Az);
 8000ee2:	2334      	movs	r3, #52	@ 0x34
 8000ee4:	18fa      	adds	r2, r7, r3
 8000ee6:	2338      	movs	r3, #56	@ 0x38
 8000ee8:	18f9      	adds	r1, r7, r3
 8000eea:	233c      	movs	r3, #60	@ 0x3c
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff ff5a 	bl	8000da8 <MPU6050_Read_Accel>
	  MPU6050_Read_Accel(&Gx, &Gy, &Gz);
 8000ef4:	2328      	movs	r3, #40	@ 0x28
 8000ef6:	18fa      	adds	r2, r7, r3
 8000ef8:	232c      	movs	r3, #44	@ 0x2c
 8000efa:	18f9      	adds	r1, r7, r3
 8000efc:	2330      	movs	r3, #48	@ 0x30
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ff51 	bl	8000da8 <MPU6050_Read_Accel>

	  HAL_UART_Transmit(&huart2, hello, strlen(hello), 1000);
 8000f06:	003b      	movs	r3, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f8fd 	bl	8000108 <strlen>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	23fa      	movs	r3, #250	@ 0xfa
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	0039      	movs	r1, r7
 8000f18:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <main+0xfc>)
 8000f1a:	f002 fb4b 	bl	80035b4 <HAL_UART_Transmit>

	  sprintf(buf, "%f\n", Ax);
 8000f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f20:	1c18      	adds	r0, r3, #0
 8000f22:	f7ff fdf1 	bl	8000b08 <__aeabi_f2d>
 8000f26:	0002      	movs	r2, r0
 8000f28:	000b      	movs	r3, r1
 8000f2a:	4922      	ldr	r1, [pc, #136]	@ (8000fb4 <main+0x100>)
 8000f2c:	2414      	movs	r4, #20
 8000f2e:	1938      	adds	r0, r7, r4
 8000f30:	f003 f854 	bl	8003fdc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t)buf, strlen(buf), 1000);
 8000f34:	0022      	movs	r2, r4
 8000f36:	18bb      	adds	r3, r7, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	001c      	movs	r4, r3
 8000f3c:	18bb      	adds	r3, r7, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff f8e2 	bl	8000108 <strlen>
 8000f44:	0003      	movs	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	23fa      	movs	r3, #250	@ 0xfa
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <main+0xfc>)
 8000f4e:	0021      	movs	r1, r4
 8000f50:	f002 fb30 	bl	80035b4 <HAL_UART_Transmit>


	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	005a      	lsls	r2, r3, #1
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fd6d 	bl	8001a3e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f64:	23fa      	movs	r3, #250	@ 0xfa
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 fb05 	bl	8001578 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	005a      	lsls	r2, r3, #1
 8000f72:	23a0      	movs	r3, #160	@ 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fd60 	bl	8001a3e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	009a      	lsls	r2, r3, #2
 8000f82:	23a0      	movs	r3, #160	@ 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fd58 	bl	8001a3e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f8e:	23fa      	movs	r3, #250	@ 0xfa
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 faf0 	bl	8001578 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	009a      	lsls	r2, r3, #2
 8000f9c:	23a0      	movs	r3, #160	@ 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fd4b 	bl	8001a3e <HAL_GPIO_TogglePin>
	  MPU6050_Read_Accel(&Ax, &Ay, &Az);
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	e79a      	b.n	8000ee2 <main+0x2e>
 8000fac:	08004934 	.word	0x08004934
 8000fb0:	200000d4 	.word	0x200000d4
 8000fb4:	08004930 	.word	0x08004930

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b099      	sub	sp, #100	@ 0x64
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	242c      	movs	r4, #44	@ 0x2c
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2334      	movs	r3, #52	@ 0x34
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f003 f827 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fce:	2318      	movs	r3, #24
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2314      	movs	r3, #20
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f003 f81f 	bl	800401c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fde:	003b      	movs	r3, r7
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f003 f818 	bl	800401c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <SystemClock_Config+0xe0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800109c <SystemClock_Config+0xe4>)
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <SystemClock_Config+0xe0>)
 8000ff6:	2180      	movs	r1, #128	@ 0x80
 8000ff8:	0109      	lsls	r1, r1, #4
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	0021      	movs	r1, r4
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2210      	movs	r2, #16
 8001010:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2202      	movs	r2, #2
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2280      	movs	r2, #128	@ 0x80
 8001028:	03d2      	lsls	r2, r2, #15
 800102a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	187b      	adds	r3, r7, r1
 800102e:	0018      	movs	r0, r3
 8001030:	f001 fba2 	bl	8002778 <HAL_RCC_OscConfig>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001038:	f000 f8e8 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	2118      	movs	r1, #24
 800103e:	187b      	adds	r3, r7, r1
 8001040:	220f      	movs	r2, #15
 8001042:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2203      	movs	r2, #3
 8001048:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2101      	movs	r1, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f001 ff05 	bl	8002e70 <HAL_RCC_ClockConfig>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800106a:	f000 f8cf 	bl	800120c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800106e:	003b      	movs	r3, r7
 8001070:	220a      	movs	r2, #10
 8001072:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	003b      	movs	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800107a:	003b      	movs	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	003b      	movs	r3, r7
 8001082:	0018      	movs	r0, r3
 8001084:	f002 f916 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800108c:	f000 f8be 	bl	800120c <Error_Handler>
  }
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b019      	add	sp, #100	@ 0x64
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	40007000 	.word	0x40007000
 800109c:	ffffe7ff 	.word	0xffffe7ff

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <MX_I2C1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <MX_I2C1_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fcc9 	bl	8001a74 <HAL_I2C_Init>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 f891 	bl	800120c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 faaa 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 f888 	bl	800120c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010fe:	2100      	movs	r1, #0
 8001100:	0018      	movs	r0, r3
 8001102:	f001 faed 	bl	80026e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f87f 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000080 	.word	0x20000080
 8001118:	40005400 	.word	0x40005400
 800111c:	00506682 	.word	0x00506682

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <MX_USART2_UART_Init+0x5c>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800112c:	22e1      	movs	r2, #225	@ 0xe1
 800112e:	0252      	lsls	r2, r2, #9
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001164:	0018      	movs	r0, r3
 8001166:	f002 f9d1 	bl	800350c <HAL_UART_Init>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116e:	f000 f84d 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000d4 	.word	0x200000d4
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	240c      	movs	r4, #12
 8001188:	193b      	adds	r3, r7, r4
 800118a:	0018      	movs	r0, r3
 800118c:	2314      	movs	r3, #20
 800118e:	001a      	movs	r2, r3
 8001190:	2100      	movs	r1, #0
 8001192:	f002 ff43 	bl	800401c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_GPIO_Init+0x88>)
 8001198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_GPIO_Init+0x88>)
 800119c:	2101      	movs	r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_GPIO_Init+0x88>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	2201      	movs	r2, #1
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_GPIO_Init+0x88>)
 80011b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_GPIO_Init+0x88>)
 80011b4:	2102      	movs	r1, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_GPIO_Init+0x88>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011c6:	23c0      	movs	r3, #192	@ 0xc0
 80011c8:	0099      	lsls	r1, r3, #2
 80011ca:	23a0      	movs	r3, #160	@ 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2200      	movs	r2, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fc17 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	22c0      	movs	r2, #192	@ 0xc0
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	2201      	movs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	193a      	adds	r2, r7, r4
 80011f2:	23a0      	movs	r3, #160	@ 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fa95 	bl	8001728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b009      	add	sp, #36	@ 0x24
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	40021000 	.word	0x40021000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	e7fd      	b.n	8001214 <Error_Handler+0x8>

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_MspInit+0x24>)
 800121e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_MspInit+0x24>)
 8001222:	2101      	movs	r1, #1
 8001224:	430a      	orrs	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <HAL_MspInit+0x24>)
 800122a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_MspInit+0x24>)
 800122e:	2180      	movs	r1, #128	@ 0x80
 8001230:	0549      	lsls	r1, r1, #21
 8001232:	430a      	orrs	r2, r1
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	@ 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2414      	movs	r4, #20
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2314      	movs	r3, #20
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f002 fee2 	bl	800401c <memset>
  if(hi2c->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a29      	ldr	r2, [pc, #164]	@ (8001304 <HAL_I2C_MspInit+0xc4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d14b      	bne.n	80012fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 8001264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 8001268:	2101      	movs	r1, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 800127c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 8001280:	2102      	movs	r1, #2
 8001282:	430a      	orrs	r2, r1
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 8001288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001292:	193b      	adds	r3, r7, r4
 8001294:	2280      	movs	r2, #128	@ 0x80
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129a:	193b      	adds	r3, r7, r4
 800129c:	2212      	movs	r2, #18
 800129e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2203      	movs	r2, #3
 80012aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	2201      	movs	r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	193a      	adds	r2, r7, r4
 80012b4:	23a0      	movs	r3, #160	@ 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	0011      	movs	r1, r2
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fa34 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c0:	0021      	movs	r1, r4
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2212      	movs	r2, #18
 80012cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2203      	movs	r2, #3
 80012d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2201      	movs	r2, #1
 80012de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_I2C_MspInit+0xcc>)
 80012e4:	0019      	movs	r1, r3
 80012e6:	0010      	movs	r0, r2
 80012e8:	f000 fa1e 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 80012ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_I2C_MspInit+0xc8>)
 80012f2:	2180      	movs	r1, #128	@ 0x80
 80012f4:	0389      	lsls	r1, r1, #14
 80012f6:	430a      	orrs	r2, r1
 80012f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b00b      	add	sp, #44	@ 0x2c
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	40005400 	.word	0x40005400
 8001308:	40021000 	.word	0x40021000
 800130c:	50000400 	.word	0x50000400

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	240c      	movs	r4, #12
 800131a:	193b      	adds	r3, r7, r4
 800131c:	0018      	movs	r0, r3
 800131e:	2314      	movs	r3, #20
 8001320:	001a      	movs	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	f002 fe7a 	bl	800401c <memset>
  if(huart->Instance==USART2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <HAL_UART_MspInit+0x80>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d129      	bne.n	8001386 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_UART_MspInit+0x84>)
 8001334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0x84>)
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0289      	lsls	r1, r1, #10
 800133c:	430a      	orrs	r2, r1
 800133e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_UART_MspInit+0x84>)
 8001342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_UART_MspInit+0x84>)
 8001346:	2101      	movs	r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_UART_MspInit+0x84>)
 800134e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001358:	0021      	movs	r1, r4
 800135a:	187b      	adds	r3, r7, r1
 800135c:	220c      	movs	r2, #12
 800135e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2202      	movs	r2, #2
 8001364:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2203      	movs	r2, #3
 8001370:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2204      	movs	r2, #4
 8001376:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	187a      	adds	r2, r7, r1
 800137a:	23a0      	movs	r3, #160	@ 0xa0
 800137c:	05db      	lsls	r3, r3, #23
 800137e:	0011      	movs	r1, r2
 8001380:	0018      	movs	r0, r3
 8001382:	f000 f9d1 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b009      	add	sp, #36	@ 0x24
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8be 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	18d3      	adds	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f002 fe16 	bl	800402c <__errno>
 8001400:	0003      	movs	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	2301      	movs	r3, #1
 8001408:	425b      	negs	r3, r3
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	18d2      	adds	r2, r2, r3
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <_sbrk+0x64>)
 800141c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b006      	add	sp, #24
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20002000 	.word	0x20002000
 800142c:	00000400 	.word	0x00000400
 8001430:	2000015c 	.word	0x2000015c
 8001434:	200002b0 	.word	0x200002b0

08001438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001446:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001448:	f7ff fff6 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f002 fde1 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fd1d 	bl	8000eb4 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
   ldr   r0, =_estack
 800147c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001488:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 800148c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001490:	200002ac 	.word	0x200002ac

08001494 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_COMP_IRQHandler>
	...

08001498 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_Init+0x3c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Init+0x3c>)
 80014aa:	2140      	movs	r1, #64	@ 0x40
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f811 	bl	80014d8 <HAL_InitTick>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e001      	b.n	80014c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c2:	f7ff fea9 	bl	8001218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_InitTick+0x5c>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	23fa      	movs	r3, #250	@ 0xfa
 80014ec:	0098      	lsls	r0, r3, #2
 80014ee:	f7fe fe1d 	bl	800012c <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	0019      	movs	r1, r3
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7fe fe18 	bl	800012c <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f905 	bl	800170e <HAL_SYSTICK_Config>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e00f      	b.n	800152c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80b      	bhi.n	800152a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f8e2 	bl	80016e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_InitTick+0x64>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000008 	.word	0x20000008
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	18d2      	adds	r2, r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_IncTick+0x20>)
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			@ (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	20000008 	.word	0x20000008
 8001560:	20000160 	.word	0x20000160

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	@ (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	20000160 	.word	0x20000160

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	189b      	adds	r3, r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	46c0      	nop			@ (mov r8, r8)
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015d4:	d828      	bhi.n	8001628 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <__NVIC_SetPriority+0xd4>)
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	33c0      	adds	r3, #192	@ 0xc0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	589b      	ldr	r3, [r3, r2]
 80015e6:	1dfa      	adds	r2, r7, #7
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	0011      	movs	r1, r2
 80015ec:	2203      	movs	r2, #3
 80015ee:	400a      	ands	r2, r1
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	21ff      	movs	r1, #255	@ 0xff
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	43d2      	mvns	r2, r2
 80015fa:	401a      	ands	r2, r3
 80015fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	22ff      	movs	r2, #255	@ 0xff
 8001604:	401a      	ands	r2, r3
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	2303      	movs	r3, #3
 800160e:	4003      	ands	r3, r0
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001614:	481f      	ldr	r0, [pc, #124]	@ (8001694 <__NVIC_SetPriority+0xd4>)
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b25b      	sxtb	r3, r3
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	430a      	orrs	r2, r1
 8001620:	33c0      	adds	r3, #192	@ 0xc0
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001626:	e031      	b.n	800168c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001628:	4a1b      	ldr	r2, [pc, #108]	@ (8001698 <__NVIC_SetPriority+0xd8>)
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0019      	movs	r1, r3
 8001630:	230f      	movs	r3, #15
 8001632:	400b      	ands	r3, r1
 8001634:	3b08      	subs	r3, #8
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3306      	adds	r3, #6
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	3304      	adds	r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1dfa      	adds	r2, r7, #7
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	0011      	movs	r1, r2
 8001648:	2203      	movs	r2, #3
 800164a:	400a      	ands	r2, r1
 800164c:	00d2      	lsls	r2, r2, #3
 800164e:	21ff      	movs	r1, #255	@ 0xff
 8001650:	4091      	lsls	r1, r2
 8001652:	000a      	movs	r2, r1
 8001654:	43d2      	mvns	r2, r2
 8001656:	401a      	ands	r2, r3
 8001658:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	22ff      	movs	r2, #255	@ 0xff
 8001660:	401a      	ands	r2, r3
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	0018      	movs	r0, r3
 8001668:	2303      	movs	r3, #3
 800166a:	4003      	ands	r3, r0
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001670:	4809      	ldr	r0, [pc, #36]	@ (8001698 <__NVIC_SetPriority+0xd8>)
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	001c      	movs	r4, r3
 8001678:	230f      	movs	r3, #15
 800167a:	4023      	ands	r3, r4
 800167c:	3b08      	subs	r3, #8
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	430a      	orrs	r2, r1
 8001682:	3306      	adds	r3, #6
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	18c3      	adds	r3, r0, r3
 8001688:	3304      	adds	r3, #4
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b003      	add	sp, #12
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	045b      	lsls	r3, r3, #17
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d301      	bcc.n	80016b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b0:	2301      	movs	r3, #1
 80016b2:	e010      	b.n	80016d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <SysTick_Config+0x44>)
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	3a01      	subs	r2, #1
 80016ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016bc:	2301      	movs	r3, #1
 80016be:	425b      	negs	r3, r3
 80016c0:	2103      	movs	r1, #3
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ff7c 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x44>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x44>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	210f      	movs	r1, #15
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	1c02      	adds	r2, r0, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ffbf 	bl	800169c <SysTick_Config>
 800171e:	0003      	movs	r3, r0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800173e:	e149      	b.n	80019d4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4091      	lsls	r1, r2
 800174a:	000a      	movs	r2, r1
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d100      	bne.n	8001758 <HAL_GPIO_Init+0x30>
 8001756:	e13a      	b.n	80019ce <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d005      	beq.n	8001770 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800176c:	2b02      	cmp	r3, #2
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	2201      	movs	r2, #1
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2203      	movs	r2, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d017      	beq.n	800180e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2203      	movs	r2, #3
 8001814:	4013      	ands	r3, r2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	58d3      	ldr	r3, [r2, r3]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2207      	movs	r2, #7
 800182c:	4013      	ands	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2107      	movs	r1, #7
 8001846:	400b      	ands	r3, r1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	409a      	lsls	r2, r3
 800184c:	0013      	movs	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	401a      	ands	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_GPIO_Init+0x17c>
 80018a2:	e094      	b.n	80019ce <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b51      	ldr	r3, [pc, #324]	@ (80019ec <HAL_GPIO_Init+0x2c4>)
 80018a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a8:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_GPIO_Init+0x2c4>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b0:	4a4f      	ldr	r2, [pc, #316]	@ (80019f0 <HAL_GPIO_Init+0x2c8>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	589b      	ldr	r3, [r3, r2]
 80018bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	23a0      	movs	r3, #160	@ 0xa0
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	429a      	cmp	r2, r3
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1de>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a44      	ldr	r2, [pc, #272]	@ (80019f4 <HAL_GPIO_Init+0x2cc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1da>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a43      	ldr	r2, [pc, #268]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <HAL_GPIO_Init+0x2d4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1d2>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x1e0>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x1e0>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x1e0>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x1e0>
 8001906:	2300      	movs	r3, #0
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	2103      	movs	r1, #3
 800190c:	400a      	ands	r2, r1
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	@ (80019f0 <HAL_GPIO_Init+0x2c8>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43da      	mvns	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	035b      	lsls	r3, r3, #13
 800193e:	4013      	ands	r3, r2
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001950:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43da      	mvns	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	039b      	lsls	r3, r3, #14
 8001968:	4013      	ands	r3, r2
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001974:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43da      	mvns	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43da      	mvns	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	025b      	lsls	r3, r3, #9
 80019bc:	4013      	ands	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_GPIO_Init+0x2d8>)
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	40da      	lsrs	r2, r3
 80019dc:	1e13      	subs	r3, r2, #0
 80019de:	d000      	beq.n	80019e2 <HAL_GPIO_Init+0x2ba>
 80019e0:	e6ae      	b.n	8001740 <HAL_GPIO_Init+0x18>
  }
}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b006      	add	sp, #24
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	50000400 	.word	0x50000400
 80019f8:	50000800 	.word	0x50000800
 80019fc:	50001c00 	.word	0x50001c00
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	0008      	movs	r0, r1
 8001a0e:	0011      	movs	r1, r2
 8001a10:	1cbb      	adds	r3, r7, #2
 8001a12:	1c02      	adds	r2, r0, #0
 8001a14:	801a      	strh	r2, [r3, #0]
 8001a16:	1c7b      	adds	r3, r7, #1
 8001a18:	1c0a      	adds	r2, r1, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1c:	1c7b      	adds	r3, r7, #1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a24:	1cbb      	adds	r3, r7, #2
 8001a26:	881a      	ldrh	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a2e:	1cbb      	adds	r3, r7, #2
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	000a      	movs	r2, r1
 8001a48:	1cbb      	adds	r3, r7, #2
 8001a4a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	1cb9      	adds	r1, r7, #2
 8001a62:	8809      	ldrh	r1, [r1, #0]
 8001a64:	400b      	ands	r3, r1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
}
 8001a6c:	46c0      	nop			@ (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b004      	add	sp, #16
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e082      	b.n	8001b8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2241      	movs	r2, #65	@ 0x41
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fbcf 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2241      	movs	r2, #65	@ 0x41
 8001aa6:	2124      	movs	r1, #36	@ 0x24
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4934      	ldr	r1, [pc, #208]	@ (8001b94 <HAL_I2C_Init+0x120>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4931      	ldr	r1, [pc, #196]	@ (8001b98 <HAL_I2C_Init+0x124>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	0209      	lsls	r1, r1, #8
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	e007      	b.n	8001b02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2184      	movs	r1, #132	@ 0x84
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d104      	bne.n	8001b14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	491f      	ldr	r1, [pc, #124]	@ (8001b9c <HAL_I2C_Init+0x128>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	491a      	ldr	r1, [pc, #104]	@ (8001b98 <HAL_I2C_Init+0x124>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69d9      	ldr	r1, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2241      	movs	r2, #65	@ 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2242      	movs	r2, #66	@ 0x42
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f0ffffff 	.word	0xf0ffffff
 8001b98:	ffff7fff 	.word	0xffff7fff
 8001b9c:	02008000 	.word	0x02008000

08001ba0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	000c      	movs	r4, r1
 8001baa:	0010      	movs	r0, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	230a      	movs	r3, #10
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	1c22      	adds	r2, r4, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2241      	movs	r2, #65	@ 0x41
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d000      	beq.n	8001bd2 <HAL_I2C_Mem_Write+0x32>
 8001bd0:	e10c      	b.n	8001dec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_I2C_Mem_Write+0x42>
 8001bd8:	232c      	movs	r3, #44	@ 0x2c
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ff      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2240      	movs	r2, #64	@ 0x40
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2C_Mem_Write+0x5c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0f8      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	@ 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c04:	f7ff fcae 	bl	8001564 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	0219      	lsls	r1, r3, #8
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2319      	movs	r3, #25
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f000 fb0b 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e3      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2241      	movs	r2, #65	@ 0x41
 8001c2a:	2121      	movs	r1, #33	@ 0x21
 8001c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2242      	movs	r2, #66	@ 0x42
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	222c      	movs	r2, #44	@ 0x2c
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c52:	1dbb      	adds	r3, r7, #6
 8001c54:	881c      	ldrh	r4, [r3, #0]
 8001c56:	2308      	movs	r3, #8
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	8819      	ldrh	r1, [r3, #0]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	0023      	movs	r3, r4
 8001c6e:	f000 f9f9 	bl	8002064 <I2C_RequestMemoryWrite>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2240      	movs	r2, #64	@ 0x40
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0b5      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2bff      	cmp	r3, #255	@ 0xff
 8001c8a:	d911      	bls.n	8001cb0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	@ 0xff
 8001c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	045c      	lsls	r4, r3, #17
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	8819      	ldrh	r1, [r3, #0]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	0023      	movs	r3, r4
 8001caa:	f000 fc93 	bl	80025d4 <I2C_TransferConfig>
 8001cae:	e012      	b.n	8001cd6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	049c      	lsls	r4, r3, #18
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	8819      	ldrh	r1, [r3, #0]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	f000 fc7f 	bl	80025d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 faf7 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e081      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03a      	beq.n	8001d9a <HAL_I2C_Mem_Write+0x1fa>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d136      	bne.n	8001d9a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	0013      	movs	r3, r2
 8001d36:	2200      	movs	r2, #0
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	f000 fa7b 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e053      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2bff      	cmp	r3, #255	@ 0xff
 8001d4e:	d911      	bls.n	8001d74 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	22ff      	movs	r2, #255	@ 0xff
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	045c      	lsls	r4, r3, #17
 8001d60:	230a      	movs	r3, #10
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	8819      	ldrh	r1, [r3, #0]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	0023      	movs	r3, r4
 8001d6e:	f000 fc31 	bl	80025d4 <I2C_TransferConfig>
 8001d72:	e012      	b.n	8001d9a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	049c      	lsls	r4, r3, #18
 8001d88:	230a      	movs	r3, #10
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	8819      	ldrh	r1, [r3, #0]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	0023      	movs	r3, r4
 8001d96:	f000 fc1d 	bl	80025d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d198      	bne.n	8001cd6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fad6 	bl	800235c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01a      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	490b      	ldr	r1, [pc, #44]	@ (8001df8 <HAL_I2C_Mem_Write+0x258>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2241      	movs	r2, #65	@ 0x41
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2242      	movs	r2, #66	@ 0x42
 8001ddc:	2100      	movs	r1, #0
 8001dde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b007      	add	sp, #28
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	fe00e800 	.word	0xfe00e800

08001dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	000c      	movs	r4, r1
 8001e06:	0010      	movs	r0, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	230a      	movs	r3, #10
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	1c22      	adds	r2, r4, #0
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	2308      	movs	r3, #8
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	1c02      	adds	r2, r0, #0
 8001e18:	801a      	strh	r2, [r3, #0]
 8001e1a:	1dbb      	adds	r3, r7, #6
 8001e1c:	1c0a      	adds	r2, r1, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2241      	movs	r2, #65	@ 0x41
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d000      	beq.n	8001e2e <HAL_I2C_Mem_Read+0x32>
 8001e2c:	e110      	b.n	8002050 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_I2C_Mem_Read+0x42>
 8001e34:	232c      	movs	r3, #44	@ 0x2c
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e103      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2240      	movs	r2, #64	@ 0x40
 8001e4e:	5c9b      	ldrb	r3, [r3, r2]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_I2C_Mem_Read+0x5c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0fc      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e60:	f7ff fb80 	bl	8001564 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	0219      	lsls	r1, r3, #8
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2319      	movs	r3, #25
 8001e74:	2201      	movs	r2, #1
 8001e76:	f000 f9dd 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e7      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2241      	movs	r2, #65	@ 0x41
 8001e86:	2122      	movs	r1, #34	@ 0x22
 8001e88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2242      	movs	r2, #66	@ 0x42
 8001e8e:	2140      	movs	r1, #64	@ 0x40
 8001e90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	222c      	movs	r2, #44	@ 0x2c
 8001ea2:	18ba      	adds	r2, r7, r2
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eae:	1dbb      	adds	r3, r7, #6
 8001eb0:	881c      	ldrh	r4, [r3, #0]
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	230a      	movs	r3, #10
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	8819      	ldrh	r1, [r3, #0]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	0023      	movs	r3, r4
 8001eca:	f000 f92f 	bl	800212c <I2C_RequestMemoryRead>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2240      	movs	r2, #64	@ 0x40
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0b9      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2bff      	cmp	r3, #255	@ 0xff
 8001ee6:	d911      	bls.n	8001f0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	22ff      	movs	r2, #255	@ 0xff
 8001eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	045c      	lsls	r4, r3, #17
 8001ef8:	230a      	movs	r3, #10
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	8819      	ldrh	r1, [r3, #0]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	4b56      	ldr	r3, [pc, #344]	@ (800205c <HAL_I2C_Mem_Read+0x260>)
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	0023      	movs	r3, r4
 8001f06:	f000 fb65 	bl	80025d4 <I2C_TransferConfig>
 8001f0a:	e012      	b.n	8001f32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	049c      	lsls	r4, r3, #18
 8001f20:	230a      	movs	r3, #10
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	8819      	ldrh	r1, [r3, #0]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_I2C_Mem_Read+0x260>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	0023      	movs	r3, r4
 8001f2e:	f000 fb51 	bl	80025d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2104      	movs	r1, #4
 8001f40:	f000 f978 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e082      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03a      	beq.n	8001ffe <HAL_I2C_Mem_Read+0x202>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d136      	bne.n	8001ffe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	0013      	movs	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	f000 f949 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e053      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2bff      	cmp	r3, #255	@ 0xff
 8001fb2:	d911      	bls.n	8001fd8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	22ff      	movs	r2, #255	@ 0xff
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	045c      	lsls	r4, r3, #17
 8001fc4:	230a      	movs	r3, #10
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	8819      	ldrh	r1, [r3, #0]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	0023      	movs	r3, r4
 8001fd2:	f000 faff 	bl	80025d4 <I2C_TransferConfig>
 8001fd6:	e012      	b.n	8001ffe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	049c      	lsls	r4, r3, #18
 8001fec:	230a      	movs	r3, #10
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	8819      	ldrh	r1, [r3, #0]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	0023      	movs	r3, r4
 8001ffa:	f000 faeb 	bl	80025d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d194      	bne.n	8001f32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f9a4 	bl	800235c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e01a      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2220      	movs	r2, #32
 8002022:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	490c      	ldr	r1, [pc, #48]	@ (8002060 <HAL_I2C_Mem_Read+0x264>)
 8002030:	400a      	ands	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2241      	movs	r2, #65	@ 0x41
 8002038:	2120      	movs	r1, #32
 800203a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2242      	movs	r2, #66	@ 0x42
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b007      	add	sp, #28
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	80002400 	.word	0x80002400
 8002060:	fe00e800 	.word	0xfe00e800

08002064 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	000c      	movs	r4, r1
 800206e:	0010      	movs	r0, r2
 8002070:	0019      	movs	r1, r3
 8002072:	250a      	movs	r5, #10
 8002074:	197b      	adds	r3, r7, r5
 8002076:	1c22      	adds	r2, r4, #0
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	2308      	movs	r3, #8
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	1c02      	adds	r2, r0, #0
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	1c0a      	adds	r2, r1, #0
 8002086:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002088:	1dbb      	adds	r3, r7, #6
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	045c      	lsls	r4, r3, #17
 8002092:	197b      	adds	r3, r7, r5
 8002094:	8819      	ldrh	r1, [r3, #0]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <I2C_RequestMemoryWrite+0xc4>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	0023      	movs	r3, r4
 800209e:	f000 fa99 	bl	80025d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 f911 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e033      	b.n	800211e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020be:	2308      	movs	r3, #8
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80020cc:	e019      	b.n	8002102 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ce:	2308      	movs	r3, #8
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e2:	6a39      	ldr	r1, [r7, #32]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f8f2 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ec:	1e03      	subs	r3, r0, #0
 80020ee:	d001      	beq.n	80020f4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e014      	b.n	800211e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f4:	2308      	movs	r3, #8
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002102:	6a3a      	ldr	r2, [r7, #32]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	0013      	movs	r3, r2
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	@ 0x80
 8002110:	f000 f890 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bdb0      	pop	{r4, r5, r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	80002000 	.word	0x80002000

0800212c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	000c      	movs	r4, r1
 8002136:	0010      	movs	r0, r2
 8002138:	0019      	movs	r1, r3
 800213a:	250a      	movs	r5, #10
 800213c:	197b      	adds	r3, r7, r5
 800213e:	1c22      	adds	r2, r4, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	2308      	movs	r3, #8
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	1c02      	adds	r2, r0, #0
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	1dbb      	adds	r3, r7, #6
 800214c:	1c0a      	adds	r2, r1, #0
 800214e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	197b      	adds	r3, r7, r5
 8002158:	8819      	ldrh	r1, [r3, #0]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <I2C_RequestMemoryRead+0xc0>)
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	f000 fa37 	bl	80025d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f8af 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d001      	beq.n	800217a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e033      	b.n	80021e2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002182:	2308      	movs	r3, #8
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002190:	e019      	b.n	80021c6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002192:	2308      	movs	r3, #8
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a6:	6a39      	ldr	r1, [r7, #32]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f890 	bl	80022d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80021b0:	1e03      	subs	r3, r0, #0
 80021b2:	d001      	beq.n	80021b8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e014      	b.n	80021e2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b8:	2308      	movs	r3, #8
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	0013      	movs	r3, r2
 80021d0:	2200      	movs	r2, #0
 80021d2:	2140      	movs	r1, #64	@ 0x40
 80021d4:	f000 f82e 	bl	8002234 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d001      	beq.n	80021e0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b004      	add	sp, #16
 80021e8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	80002000 	.word	0x80002000

080021f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d103      	bne.n	800220e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	2b01      	cmp	r3, #1
 800221a:	d007      	beq.n	800222c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
  }
}
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002244:	e030      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	d02d      	beq.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7ff f98a 	bl	8001564 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d122      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	425a      	negs	r2, r3
 8002272:	4153      	adcs	r3, r2
 8002274:	b2db      	uxtb	r3, r3
 8002276:	001a      	movs	r2, r3
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d113      	bne.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	2220      	movs	r2, #32
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2241      	movs	r2, #65	@ 0x41
 8002290:	2120      	movs	r1, #32
 8002292:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2242      	movs	r2, #66	@ 0x42
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00f      	b.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	425a      	negs	r2, r3
 80022b8:	4153      	adcs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	001a      	movs	r2, r3
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d0bf      	beq.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022dc:	e032      	b.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f87d 	bl	80023e4 <I2C_IsErrorOccurred>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e030      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3301      	adds	r3, #1
 80022f6:	d025      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	f7ff f934 	bl	8001564 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	d302      	bcc.n	800230e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11a      	bne.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d013      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2241      	movs	r2, #65	@ 0x41
 800232c:	2120      	movs	r1, #32
 800232e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2242      	movs	r2, #66	@ 0x42
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d1c5      	bne.n	80022de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}

0800235c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002368:	e02f      	b.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f837 	bl	80023e4 <I2C_IsErrorOccurred>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02d      	b.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f8f1 	bl	8001564 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d11a      	bne.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d013      	beq.n	80023ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	2220      	movs	r2, #32
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2241      	movs	r2, #65	@ 0x41
 80023b2:	2120      	movs	r1, #32
 80023b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2242      	movs	r2, #66	@ 0x42
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2220      	movs	r2, #32
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d1c8      	bne.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2327      	movs	r3, #39	@ 0x27
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <I2C_IsErrorOccurred+0x2e>
 8002410:	e079      	b.n	8002506 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241a:	e057      	b.n	80024cc <I2C_IsErrorOccurred+0xe8>
 800241c:	2227      	movs	r2, #39	@ 0x27
 800241e:	18bb      	adds	r3, r7, r2
 8002420:	18ba      	adds	r2, r7, r2
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	d04f      	beq.n	80024cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff f89a 	bl	8001564 <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_IsErrorOccurred+0x5e>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d144      	bne.n	80024cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	01db      	lsls	r3, r3, #7
 800244c:	4013      	ands	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002450:	2013      	movs	r0, #19
 8002452:	183b      	adds	r3, r7, r0
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	2142      	movs	r1, #66	@ 0x42
 8002458:	5c52      	ldrb	r2, [r2, r1]
 800245a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	401a      	ands	r2, r3
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	429a      	cmp	r2, r3
 800246e:	d126      	bne.n	80024be <I2C_IsErrorOccurred+0xda>
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	01db      	lsls	r3, r3, #7
 8002476:	429a      	cmp	r2, r3
 8002478:	d021      	beq.n	80024be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b20      	cmp	r3, #32
 8002480:	d01d      	beq.n	80024be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2180      	movs	r1, #128	@ 0x80
 800248e:	01c9      	lsls	r1, r1, #7
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002494:	f7ff f866 	bl	8001564 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249c:	e00f      	b.n	80024be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800249e:	f7ff f861 	bl	8001564 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b19      	cmp	r3, #25
 80024aa:	d908      	bls.n	80024be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2220      	movs	r2, #32
 80024b0:	4313      	orrs	r3, r2
 80024b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024b4:	2327      	movs	r3, #39	@ 0x27
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]

              break;
 80024bc:	e006      	b.n	80024cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2220      	movs	r2, #32
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d1e8      	bne.n	800249e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2220      	movs	r2, #32
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d004      	beq.n	80024e4 <I2C_IsErrorOccurred+0x100>
 80024da:	2327      	movs	r3, #39	@ 0x27
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d09b      	beq.n	800241c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024e4:	2327      	movs	r3, #39	@ 0x27
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2204      	movs	r2, #4
 80024fa:	4313      	orrs	r3, r2
 80024fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024fe:	2327      	movs	r3, #39	@ 0x27
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d00c      	beq.n	8002532 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2201      	movs	r2, #1
 800251c:	4313      	orrs	r3, r2
 800251e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2280      	movs	r2, #128	@ 0x80
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252a:	2327      	movs	r3, #39	@ 0x27
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4013      	ands	r3, r2
 800253a:	d00c      	beq.n	8002556 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2208      	movs	r2, #8
 8002540:	4313      	orrs	r3, r2
 8002542:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800254e:	2327      	movs	r3, #39	@ 0x27
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d00c      	beq.n	800257a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2202      	movs	r2, #2
 8002564:	4313      	orrs	r3, r2
 8002566:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002572:	2327      	movs	r3, #39	@ 0x27
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800257a:	2327      	movs	r3, #39	@ 0x27
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01d      	beq.n	80025c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff fe32 	bl	80021f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	490e      	ldr	r1, [pc, #56]	@ (80025d0 <I2C_IsErrorOccurred+0x1ec>)
 8002598:	400a      	ands	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2241      	movs	r2, #65	@ 0x41
 80025ac:	2120      	movs	r1, #32
 80025ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2242      	movs	r2, #66	@ 0x42
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	@ 0x40
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025c0:	2327      	movs	r3, #39	@ 0x27
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b00a      	add	sp, #40	@ 0x28
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	fe00e800 	.word	0xfe00e800

080025d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	0008      	movs	r0, r1
 80025de:	0011      	movs	r1, r2
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	240a      	movs	r4, #10
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	2009      	movs	r0, #9
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	1c0a      	adds	r2, r1, #0
 80025f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	059b      	lsls	r3, r3, #22
 80025f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	0419      	lsls	r1, r3, #16
 8002600:	23ff      	movs	r3, #255	@ 0xff
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002606:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	4313      	orrs	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800261e:	0d51      	lsrs	r1, r2, #21
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	00d2      	lsls	r2, r2, #3
 8002624:	400a      	ands	r2, r1
 8002626:	4907      	ldr	r1, [pc, #28]	@ (8002644 <I2C_TransferConfig+0x70>)
 8002628:	430a      	orrs	r2, r1
 800262a:	43d2      	mvns	r2, r2
 800262c:	401a      	ands	r2, r3
 800262e:	0011      	movs	r1, r2
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b007      	add	sp, #28
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	03ff63ff 	.word	0x03ff63ff

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2241      	movs	r2, #65	@ 0x41
 8002656:	5c9b      	ldrb	r3, [r3, r2]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2240      	movs	r2, #64	@ 0x40
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	2101      	movs	r1, #1
 8002672:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2241      	movs	r2, #65	@ 0x41
 8002678:	2124      	movs	r1, #36	@ 0x24
 800267a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4911      	ldr	r1, [pc, #68]	@ (80026dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002698:	400a      	ands	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2241      	movs	r2, #65	@ 0x41
 80026c0:	2120      	movs	r1, #32
 80026c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	@ 0x40
 80026c8:	2100      	movs	r1, #0
 80026ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b002      	add	sp, #8
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	ffffefff 	.word	0xffffefff

080026e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d139      	bne.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002700:	2302      	movs	r3, #2
 8002702:	e033      	b.n	800276c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2240      	movs	r2, #64	@ 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2241      	movs	r2, #65	@ 0x41
 8002710:	2124      	movs	r1, #36	@ 0x24
 8002712:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	438a      	bics	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2241      	movs	r2, #65	@ 0x41
 800275a:	2120      	movs	r1, #32
 800275c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2240      	movs	r2, #64	@ 0x40
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}
 8002774:	fffff0ff 	.word	0xfffff0ff

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f000 fb6c 	bl	8002e64 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278c:	4bc8      	ldr	r3, [pc, #800]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	220c      	movs	r2, #12
 8002792:	4013      	ands	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002796:	4bc6      	ldr	r3, [pc, #792]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d100      	bne.n	80027ae <HAL_RCC_OscConfig+0x36>
 80027ac:	e07d      	b.n	80028aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x68>
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	4bba      	ldr	r3, [pc, #744]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	4013      	ands	r3, r2
 80027ce:	d100      	bne.n	80027d2 <HAL_RCC_OscConfig+0x5a>
 80027d0:	e06a      	b.n	80028a8 <HAL_RCC_OscConfig+0x130>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d166      	bne.n	80028a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f000 fb42 	bl	8002e64 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x84>
 80027ec:	4bb0      	ldr	r3, [pc, #704]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4baf      	ldr	r3, [pc, #700]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	0249      	lsls	r1, r1, #9
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e027      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	23a0      	movs	r3, #160	@ 0xa0
 8002802:	02db      	lsls	r3, r3, #11
 8002804:	429a      	cmp	r2, r3
 8002806:	d10e      	bne.n	8002826 <HAL_RCC_OscConfig+0xae>
 8002808:	4ba9      	ldr	r3, [pc, #676]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4ba8      	ldr	r3, [pc, #672]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	02c9      	lsls	r1, r1, #11
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4ba6      	ldr	r3, [pc, #664]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800281c:	2180      	movs	r1, #128	@ 0x80
 800281e:	0249      	lsls	r1, r1, #9
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e012      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002826:	4ba2      	ldr	r3, [pc, #648]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800282c:	49a1      	ldr	r1, [pc, #644]	@ (8002ab4 <HAL_RCC_OscConfig+0x33c>)
 800282e:	400a      	ands	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b9f      	ldr	r3, [pc, #636]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	025b      	lsls	r3, r3, #9
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b9a      	ldr	r3, [pc, #616]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002846:	499c      	ldr	r1, [pc, #624]	@ (8002ab8 <HAL_RCC_OscConfig+0x340>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d014      	beq.n	800287e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fe86 	bl	8001564 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe fe81 	bl	8001564 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	@ 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e2f9      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002870:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0xe6>
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fe71 	bl	8001564 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fe6c 	bl	8001564 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	@ 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e2e4      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	4b85      	ldr	r3, [pc, #532]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	029b      	lsls	r3, r3, #10
 80028a2:	4013      	ands	r3, r2
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x110>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x13e>
 80028b4:	e099      	b.n	80029ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	2220      	movs	r2, #32
 80028c0:	4013      	ands	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80028c4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80028ca:	2120      	movs	r1, #32
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	2220      	movs	r2, #32
 80028d4:	4393      	bics	r3, r2
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d13e      	bne.n	8002962 <HAL_RCC_OscConfig+0x1ea>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13b      	bne.n	8002962 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028ea:	4b71      	ldr	r3, [pc, #452]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2204      	movs	r2, #4
 80028f0:	4013      	ands	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_RCC_OscConfig+0x186>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e2b2      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a6e      	ldr	r2, [pc, #440]	@ (8002abc <HAL_RCC_OscConfig+0x344>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002914:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2209      	movs	r2, #9
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	4b64      	ldr	r3, [pc, #400]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002926:	f000 fbeb 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 800292a:	0001      	movs	r1, r0
 800292c:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	220f      	movs	r2, #15
 8002934:	4013      	ands	r3, r2
 8002936:	4a62      	ldr	r2, [pc, #392]	@ (8002ac0 <HAL_RCC_OscConfig+0x348>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	000a      	movs	r2, r1
 800293c:	40da      	lsrs	r2, r3
 800293e:	4b61      	ldr	r3, [pc, #388]	@ (8002ac4 <HAL_RCC_OscConfig+0x34c>)
 8002940:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002942:	4b61      	ldr	r3, [pc, #388]	@ (8002ac8 <HAL_RCC_OscConfig+0x350>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2513      	movs	r5, #19
 8002948:	197c      	adds	r4, r7, r5
 800294a:	0018      	movs	r0, r3
 800294c:	f7fe fdc4 	bl	80014d8 <HAL_InitTick>
 8002950:	0003      	movs	r3, r0
 8002952:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002954:	197b      	adds	r3, r7, r5
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d046      	beq.n	80029ea <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800295c:	197b      	adds	r3, r7, r5
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	e280      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d027      	beq.n	80029b8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002968:	4b51      	ldr	r3, [pc, #324]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2209      	movs	r2, #9
 800296e:	4393      	bics	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fdf3 	bl	8001564 <HAL_GetTick>
 800297e:	0003      	movs	r3, r0
 8002980:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002984:	f7fe fdee 	bl	8001564 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e266      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2204      	movs	r2, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d0f1      	beq.n	8002984 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a45      	ldr	r2, [pc, #276]	@ (8002abc <HAL_RCC_OscConfig+0x344>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe fdce 	bl	8001564 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fdc9 	bl	8001564 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e241      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e0:	4b33      	ldr	r3, [pc, #204]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d1f1      	bne.n	80029ce <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2210      	movs	r2, #16
 80029f0:	4013      	ands	r3, r2
 80029f2:	d100      	bne.n	80029f6 <HAL_RCC_OscConfig+0x27e>
 80029f4:	e0a1      	b.n	8002b3a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d140      	bne.n	8002a7e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fc:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_OscConfig+0x29c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e227      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a2c      	ldr	r2, [pc, #176]	@ (8002acc <HAL_RCC_OscConfig+0x354>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a28:	4b21      	ldr	r3, [pc, #132]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	0a19      	lsrs	r1, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	061a      	lsls	r2, r3, #24
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	0b5b      	lsrs	r3, r3, #13
 8002a42:	3301      	adds	r3, #1
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	0212      	lsls	r2, r2, #8
 8002a48:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a4a:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	210f      	movs	r1, #15
 8002a52:	400b      	ands	r3, r1
 8002a54:	491a      	ldr	r1, [pc, #104]	@ (8002ac0 <HAL_RCC_OscConfig+0x348>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HAL_RCC_OscConfig+0x34c>)
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <HAL_RCC_OscConfig+0x350>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2513      	movs	r5, #19
 8002a64:	197c      	adds	r4, r7, r5
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fe fd36 	bl	80014d8 <HAL_InitTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a70:	197b      	adds	r3, r7, r5
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d060      	beq.n	8002b3a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002a78:	197b      	adds	r3, r7, r5
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	e1f2      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03f      	beq.n	8002b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	2180      	movs	r1, #128	@ 0x80
 8002a8e:	0049      	lsls	r1, r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fd66 	bl	8001564 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fd61 	bl	8001564 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d911      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1d9      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	fffeffff 	.word	0xfffeffff
 8002ab8:	fffbffff 	.word	0xfffbffff
 8002abc:	ffffe0ff 	.word	0xffffe0ff
 8002ac0:	08004988 	.word	0x08004988
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ad0:	4bc9      	ldr	r3, [pc, #804]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d0e0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002adc:	4bc6      	ldr	r3, [pc, #792]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4ac6      	ldr	r2, [pc, #792]	@ (8002dfc <HAL_RCC_OscConfig+0x684>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4bc3      	ldr	r3, [pc, #780]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4bc1      	ldr	r3, [pc, #772]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	0a19      	lsrs	r1, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	061a      	lsls	r2, r3, #24
 8002afe:	4bbe      	ldr	r3, [pc, #760]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e019      	b.n	8002b3a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b06:	4bbc      	ldr	r3, [pc, #752]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4bbb      	ldr	r3, [pc, #748]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b0c:	49bc      	ldr	r1, [pc, #752]	@ (8002e00 <HAL_RCC_OscConfig+0x688>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fd27 	bl	8001564 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1c:	f7fe fd22 	bl	8001564 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e19a      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b2e:	4bb2      	ldr	r3, [pc, #712]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4013      	ands	r3, r2
 8002b42:	d036      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4c:	4baa      	ldr	r3, [pc, #680]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b50:	4ba9      	ldr	r3, [pc, #676]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	430a      	orrs	r2, r1
 8002b56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe fd04 	bl	8001564 <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe fcff 	bl	8001564 <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e177      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b74:	4ba0      	ldr	r3, [pc, #640]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d0f1      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3ea>
 8002b7e:	e018      	b.n	8002bb2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b9d      	ldr	r3, [pc, #628]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b84:	4b9c      	ldr	r3, [pc, #624]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fcea 	bl	8001564 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe fce5 	bl	8001564 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e15d      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba8:	4b93      	ldr	r3, [pc, #588]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f1      	bne.n	8002b96 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d100      	bne.n	8002bbe <HAL_RCC_OscConfig+0x446>
 8002bbc:	e0ae      	b.n	8002d1c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2023      	movs	r0, #35	@ 0x23
 8002bc0:	183b      	adds	r3, r7, r0
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b8c      	ldr	r3, [pc, #560]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	055b      	lsls	r3, r3, #21
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b89      	ldr	r3, [pc, #548]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	0549      	lsls	r1, r1, #21
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002be0:	183b      	adds	r3, r7, r0
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b87      	ldr	r3, [pc, #540]	@ (8002e04 <HAL_RCC_OscConfig+0x68c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d11a      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf2:	4b84      	ldr	r3, [pc, #528]	@ (8002e04 <HAL_RCC_OscConfig+0x68c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b83      	ldr	r3, [pc, #524]	@ (8002e04 <HAL_RCC_OscConfig+0x68c>)
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	0049      	lsls	r1, r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fcb0 	bl	8001564 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fcab 	bl	8001564 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	@ 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e123      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_RCC_OscConfig+0x68c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4cc>
 8002c34:	4b70      	ldr	r3, [pc, #448]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c38:	4b6f      	ldr	r3, [pc, #444]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c3a:	2180      	movs	r1, #128	@ 0x80
 8002c3c:	0049      	lsls	r1, r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c42:	e031      	b.n	8002ca8 <HAL_RCC_OscConfig+0x530>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4ee>
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c50:	4b69      	ldr	r3, [pc, #420]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c52:	496b      	ldr	r1, [pc, #428]	@ (8002e00 <HAL_RCC_OscConfig+0x688>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c58:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c5c:	4b66      	ldr	r3, [pc, #408]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c5e:	496a      	ldr	r1, [pc, #424]	@ (8002e08 <HAL_RCC_OscConfig+0x690>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c64:	e020      	b.n	8002ca8 <HAL_RCC_OscConfig+0x530>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	23a0      	movs	r3, #160	@ 0xa0
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10e      	bne.n	8002c90 <HAL_RCC_OscConfig+0x518>
 8002c72:	4b61      	ldr	r3, [pc, #388]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c76:	4b60      	ldr	r3, [pc, #384]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	00c9      	lsls	r1, r1, #3
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c80:	4b5d      	ldr	r3, [pc, #372]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c84:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	0049      	lsls	r1, r1, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x530>
 8002c90:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c94:	4b58      	ldr	r3, [pc, #352]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c96:	495a      	ldr	r1, [pc, #360]	@ (8002e00 <HAL_RCC_OscConfig+0x688>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c9c:	4b56      	ldr	r3, [pc, #344]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002c9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca0:	4b55      	ldr	r3, [pc, #340]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002ca2:	4959      	ldr	r1, [pc, #356]	@ (8002e08 <HAL_RCC_OscConfig+0x690>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fc58 	bl	8001564 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb8:	e009      	b.n	8002cce <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fc53 	bl	8001564 <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a51      	ldr	r2, [pc, #324]	@ (8002e0c <HAL_RCC_OscConfig+0x694>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0ca      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cce:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0ef      	beq.n	8002cba <HAL_RCC_OscConfig+0x542>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fc42 	bl	8001564 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fc3d 	bl	8001564 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a46      	ldr	r2, [pc, #280]	@ (8002e0c <HAL_RCC_OscConfig+0x694>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0b4      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d06:	2323      	movs	r3, #35	@ 0x23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d14:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d16:	493e      	ldr	r1, [pc, #248]	@ (8002e10 <HAL_RCC_OscConfig+0x698>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d100      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5ae>
 8002d24:	e09d      	b.n	8002e62 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5b6>
 8002d2c:	e076      	b.n	8002e1c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d145      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d3c:	4935      	ldr	r1, [pc, #212]	@ (8002e14 <HAL_RCC_OscConfig+0x69c>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fc0f 	bl	8001564 <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fc0a 	bl	8001564 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e082      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d5e:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	@ 0x80
 8002d64:	049b      	lsls	r3, r3, #18
 8002d66:	4013      	ands	r3, r2
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e18 <HAL_RCC_OscConfig+0x6a0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	431a      	orrs	r2, r3
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	0449      	lsls	r1, r1, #17
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe fbe4 	bl	8001564 <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fbdf 	bl	8001564 <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e057      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002db4:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	049b      	lsls	r3, r3, #18
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x62a>
 8002dc0:	e04f      	b.n	8002e62 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002dc8:	4912      	ldr	r1, [pc, #72]	@ (8002e14 <HAL_RCC_OscConfig+0x69c>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fbc9 	bl	8001564 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fbc4 	bl	8001564 <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e03c      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dea:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_OscConfig+0x680>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	049b      	lsls	r3, r3, #18
 8002df2:	4013      	ands	r3, r2
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x660>
 8002df6:	e034      	b.n	8002e62 <HAL_RCC_OscConfig+0x6ea>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	ffff1fff 	.word	0xffff1fff
 8002e00:	fffffeff 	.word	0xfffffeff
 8002e04:	40007000 	.word	0x40007000
 8002e08:	fffffbff 	.word	0xfffffbff
 8002e0c:	00001388 	.word	0x00001388
 8002e10:	efffffff 	.word	0xefffffff
 8002e14:	feffffff 	.word	0xfeffffff
 8002e18:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01d      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <HAL_RCC_OscConfig+0x6f4>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	23f0      	movs	r3, #240	@ 0xf0
 8002e42:	039b      	lsls	r3, r3, #14
 8002e44:	401a      	ands	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	23c0      	movs	r3, #192	@ 0xc0
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	401a      	ands	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b00a      	add	sp, #40	@ 0x28
 8002e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e128      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b96      	ldr	r3, [pc, #600]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d91e      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b93      	ldr	r3, [pc, #588]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	4b90      	ldr	r3, [pc, #576]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fb5e 	bl	8001564 <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eac:	e009      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7fe fb59 	bl	8001564 <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	4a8a      	ldr	r2, [pc, #552]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e109      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eda:	4b83      	ldr	r3, [pc, #524]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	22f0      	movs	r2, #240	@ 0xf0
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d100      	bne.n	8002efa <HAL_RCC_ClockConfig+0x8a>
 8002ef8:	e089      	b.n	800300e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f02:	4b79      	ldr	r3, [pc, #484]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d120      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0e1      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f1a:	4b73      	ldr	r3, [pc, #460]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	049b      	lsls	r3, r3, #18
 8002f22:	4013      	ands	r3, r2
 8002f24:	d114      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0d5      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f32:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d109      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ca      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0c2      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f50:	4b65      	ldr	r3, [pc, #404]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2203      	movs	r2, #3
 8002f56:	4393      	bics	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4b62      	ldr	r3, [pc, #392]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fafe 	bl	8001564 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d111      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fe faf5 	bl	8001564 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0a5      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d1ef      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x106>
 8002f96:	e03a      	b.n	800300e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fe fadf 	bl	8001564 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a4d      	ldr	r2, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e08f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	220c      	movs	r2, #12
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x132>
 8002fc2:	e024      	b.n	800300e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d11b      	bne.n	8003004 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fcc:	e009      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fce:	f7fe fac9 	bl	8001564 <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	4a42      	ldr	r2, [pc, #264]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e079      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_ClockConfig+0x15e>
 8002fee:	e00e      	b.n	800300e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fab8 	bl	8001564 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e068      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003004:	4b38      	ldr	r3, [pc, #224]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	220c      	movs	r2, #12
 800300a:	4013      	ands	r3, r2
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800300e:	4b34      	ldr	r3, [pc, #208]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d21e      	bcs.n	800305a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301c:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	4b2e      	ldr	r3, [pc, #184]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800302e:	f7fe fa99 	bl	8001564 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	e009      	b.n	800304c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fa94 	bl	8001564 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	4a28      	ldr	r2, [pc, #160]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e044      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d1ee      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2204      	movs	r2, #4
 8003060:	4013      	ands	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a20      	ldr	r2, [pc, #128]	@ (80030ec <HAL_RCC_ClockConfig+0x27c>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2208      	movs	r2, #8
 800307e:	4013      	ands	r3, r2
 8003080:	d00a      	beq.n	8003098 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <HAL_RCC_ClockConfig+0x280>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	00da      	lsls	r2, r3, #3
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003098:	f000 f832 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 800309c:	0001      	movs	r1, r0
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCC_ClockConfig+0x278>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	220f      	movs	r2, #15
 80030a6:	4013      	ands	r3, r2
 80030a8:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <HAL_RCC_ClockConfig+0x284>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	000a      	movs	r2, r1
 80030ae:	40da      	lsrs	r2, r3
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_ClockConfig+0x288>)
 80030b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_ClockConfig+0x28c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	250b      	movs	r5, #11
 80030ba:	197c      	adds	r4, r7, r5
 80030bc:	0018      	movs	r0, r3
 80030be:	f7fe fa0b 	bl	80014d8 <HAL_InitTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80030c6:	197b      	adds	r3, r7, r5
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80030ce:	197b      	adds	r3, r7, r5
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b004      	add	sp, #16
 80030dc:	bdb0      	pop	{r4, r5, r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	40022000 	.word	0x40022000
 80030e4:	00001388 	.word	0x00001388
 80030e8:	40021000 	.word	0x40021000
 80030ec:	fffff8ff 	.word	0xfffff8ff
 80030f0:	ffffc7ff 	.word	0xffffc7ff
 80030f4:	08004988 	.word	0x08004988
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b08e      	sub	sp, #56	@ 0x38
 8003104:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003106:	4b4c      	ldr	r3, [pc, #304]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x138>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800310c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800310e:	230c      	movs	r3, #12
 8003110:	4013      	ands	r3, r2
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d014      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x40>
 8003116:	d900      	bls.n	800311a <HAL_RCC_GetSysClockFreq+0x1a>
 8003118:	e07b      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x112>
 800311a:	2b04      	cmp	r3, #4
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x24>
 800311e:	2b08      	cmp	r3, #8
 8003120:	d00b      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e076      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003124:	4b44      	ldr	r3, [pc, #272]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x138>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	4013      	ands	r3, r2
 800312c:	d002      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800312e:	4b43      	ldr	r3, [pc, #268]	@ (800323c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003132:	e07c      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003134:	4b42      	ldr	r3, [pc, #264]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x140>)
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003138:	e079      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313a:	4b41      	ldr	r3, [pc, #260]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x140>)
 800313c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800313e:	e076      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	0c9a      	lsrs	r2, r3, #18
 8003144:	230f      	movs	r3, #15
 8003146:	401a      	ands	r2, r3
 8003148:	4b3e      	ldr	r3, [pc, #248]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x144>)
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	0d9a      	lsrs	r2, r3, #22
 8003152:	2303      	movs	r3, #3
 8003154:	4013      	ands	r3, r2
 8003156:	3301      	adds	r3, #1
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800315a:	4b37      	ldr	r3, [pc, #220]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x138>)
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	025b      	lsls	r3, r3, #9
 8003162:	4013      	ands	r3, r2
 8003164:	d01a      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	4a34      	ldr	r2, [pc, #208]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x140>)
 8003170:	2300      	movs	r3, #0
 8003172:	69b8      	ldr	r0, [r7, #24]
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	f7fd f885 	bl	8000284 <__aeabi_lmul>
 800317a:	0002      	movs	r2, r0
 800317c:	000b      	movs	r3, r1
 800317e:	0010      	movs	r0, r2
 8003180:	0019      	movs	r1, r3
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f7fd f859 	bl	8000244 <__aeabi_uldivmod>
 8003192:	0002      	movs	r2, r0
 8003194:	000b      	movs	r3, r1
 8003196:	0013      	movs	r3, r2
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
 800319a:	e037      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800319c:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x138>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2210      	movs	r2, #16
 80031a2:	4013      	ands	r3, r2
 80031a4:	d01a      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4a23      	ldr	r2, [pc, #140]	@ (800323c <HAL_RCC_GetSysClockFreq+0x13c>)
 80031b0:	2300      	movs	r3, #0
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	f7fd f865 	bl	8000284 <__aeabi_lmul>
 80031ba:	0002      	movs	r2, r0
 80031bc:	000b      	movs	r3, r1
 80031be:	0010      	movs	r0, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f7fd f839 	bl	8000244 <__aeabi_uldivmod>
 80031d2:	0002      	movs	r2, r0
 80031d4:	000b      	movs	r3, r1
 80031d6:	0013      	movs	r3, r2
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031da:	e017      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	0018      	movs	r0, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	0019      	movs	r1, r3
 80031e4:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x140>)
 80031e6:	2300      	movs	r3, #0
 80031e8:	f7fd f84c 	bl	8000284 <__aeabi_lmul>
 80031ec:	0002      	movs	r2, r0
 80031ee:	000b      	movs	r3, r1
 80031f0:	0010      	movs	r0, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	001c      	movs	r4, r3
 80031f8:	2300      	movs	r3, #0
 80031fa:	001d      	movs	r5, r3
 80031fc:	0022      	movs	r2, r4
 80031fe:	002b      	movs	r3, r5
 8003200:	f7fd f820 	bl	8000244 <__aeabi_uldivmod>
 8003204:	0002      	movs	r2, r0
 8003206:	000b      	movs	r3, r1
 8003208:	0013      	movs	r3, r2
 800320a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003210:	e00d      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x138>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	2207      	movs	r2, #7
 800321a:	4013      	ands	r3, r2
 800321c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	3301      	adds	r3, #1
 8003222:	2280      	movs	r2, #128	@ 0x80
 8003224:	0212      	lsls	r2, r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800322c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b00e      	add	sp, #56	@ 0x38
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	003d0900 	.word	0x003d0900
 8003240:	00f42400 	.word	0x00f42400
 8003244:	080049a0 	.word	0x080049a0

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b02      	ldr	r3, [pc, #8]	@ (8003258 <HAL_RCC_GetHCLKFreq+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	20000000 	.word	0x20000000

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003260:	f7ff fff2 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003264:	0001      	movs	r1, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	40d9      	lsrs	r1, r3
 8003276:	000b      	movs	r3, r1
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	40021000 	.word	0x40021000
 8003284:	08004998 	.word	0x08004998

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800328c:	f7ff ffdc 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003290:	0001      	movs	r1, r0
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	0adb      	lsrs	r3, r3, #11
 8003298:	2207      	movs	r2, #7
 800329a:	4013      	ands	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	40d9      	lsrs	r1, r3
 80032a2:	000b      	movs	r3, r1
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08004998 	.word	0x08004998

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80032bc:	2017      	movs	r0, #23
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2220      	movs	r2, #32
 80032ca:	4013      	ands	r3, r2
 80032cc:	d100      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80032ce:	e0c7      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d0:	4b84      	ldr	r3, [pc, #528]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	055b      	lsls	r3, r3, #21
 80032d8:	4013      	ands	r3, r2
 80032da:	d109      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b81      	ldr	r3, [pc, #516]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e0:	4b80      	ldr	r3, [pc, #512]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032e2:	2180      	movs	r1, #128	@ 0x80
 80032e4:	0549      	lsls	r1, r1, #21
 80032e6:	430a      	orrs	r2, r1
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80032ea:	183b      	adds	r3, r7, r0
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b7d      	ldr	r3, [pc, #500]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d11a      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	4b7a      	ldr	r3, [pc, #488]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b79      	ldr	r3, [pc, #484]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	0049      	lsls	r1, r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe f92b 	bl	8001564 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	e008      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fe f926 	bl	8001564 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0d9      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b70      	ldr	r3, [pc, #448]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d0f0      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003332:	4b6c      	ldr	r3, [pc, #432]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	23c0      	movs	r3, #192	@ 0xc0
 8003338:	039b      	lsls	r3, r3, #14
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	23c0      	movs	r3, #192	@ 0xc0
 8003344:	039b      	lsls	r3, r3, #14
 8003346:	4013      	ands	r3, r2
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	429a      	cmp	r2, r3
 800334c:	d013      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	23c0      	movs	r3, #192	@ 0xc0
 8003354:	029b      	lsls	r3, r3, #10
 8003356:	401a      	ands	r2, r3
 8003358:	23c0      	movs	r3, #192	@ 0xc0
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	429a      	cmp	r2, r3
 800335e:	d10a      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003360:	4b60      	ldr	r3, [pc, #384]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	@ 0x80
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	401a      	ands	r2, r3
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	429a      	cmp	r2, r3
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0b1      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003376:	4b5b      	ldr	r3, [pc, #364]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800337a:	23c0      	movs	r3, #192	@ 0xc0
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	23c0      	movs	r3, #192	@ 0xc0
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d033      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2220      	movs	r2, #32
 800339e:	4013      	ands	r3, r2
 80033a0:	d02e      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033a2:	4b50      	ldr	r3, [pc, #320]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a6:	4a51      	ldr	r2, [pc, #324]	@ (80034ec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033b0:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033b2:	2180      	movs	r1, #128	@ 0x80
 80033b4:	0309      	lsls	r1, r1, #12
 80033b6:	430a      	orrs	r2, r1
 80033b8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ba:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033be:	4b49      	ldr	r3, [pc, #292]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033c0:	494b      	ldr	r1, [pc, #300]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d014      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe f8c5 	bl	8001564 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033de:	e009      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe f8c0 	bl	8001564 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	4a42      	ldr	r2, [pc, #264]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e072      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f4:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4013      	ands	r3, r2
 80033fe:	d0ef      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2220      	movs	r2, #32
 8003406:	4013      	ands	r3, r2
 8003408:	d01f      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	23c0      	movs	r3, #192	@ 0xc0
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	401a      	ands	r2, r3
 8003414:	23c0      	movs	r3, #192	@ 0xc0
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	429a      	cmp	r2, r3
 800341a:	d10c      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800341c:	4b31      	ldr	r3, [pc, #196]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a35      	ldr	r2, [pc, #212]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	23c0      	movs	r3, #192	@ 0xc0
 800342c:	039b      	lsls	r3, r3, #14
 800342e:	401a      	ands	r2, r3
 8003430:	4b2c      	ldr	r3, [pc, #176]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003432:	430a      	orrs	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003438:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	23c0      	movs	r3, #192	@ 0xc0
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	401a      	ands	r2, r3
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003446:	430a      	orrs	r2, r1
 8003448:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800344a:	2317      	movs	r3, #23
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800345a:	4928      	ldr	r1, [pc, #160]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800345c:	400a      	ands	r2, r1
 800345e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	220c      	movs	r2, #12
 8003470:	4393      	bics	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800347a:	430a      	orrs	r2, r1
 800347c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2204      	movs	r2, #4
 8003484:	4013      	ands	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003488:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800348a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348c:	4a1c      	ldr	r2, [pc, #112]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003498:	430a      	orrs	r2, r1
 800349a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	4013      	ands	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034a6:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034aa:	4a16      	ldr	r2, [pc, #88]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	4013      	ands	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034c4:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b006      	add	sp, #24
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	fffcffff 	.word	0xfffcffff
 80034f0:	fff7ffff 	.word	0xfff7ffff
 80034f4:	00001388 	.word	0x00001388
 80034f8:	ffcfffff 	.word	0xffcfffff
 80034fc:	efffffff 	.word	0xefffffff
 8003500:	fffff3ff 	.word	0xfffff3ff
 8003504:	ffffcfff 	.word	0xffffcfff
 8003508:	fff3ffff 	.word	0xfff3ffff

0800350c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e044      	b.n	80035a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2278      	movs	r2, #120	@ 0x78
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd feed 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2224      	movs	r2, #36	@ 0x24
 800353a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	0018      	movs	r0, r3
 8003550:	f000 f8d0 	bl	80036f4 <UART_SetConfig>
 8003554:	0003      	movs	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e024      	b.n	80035a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fb0d 	bl	8003b88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	490d      	ldr	r1, [pc, #52]	@ (80035b0 <HAL_UART_Init+0xa4>)
 800357a:	400a      	ands	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	212a      	movs	r1, #42	@ 0x2a
 800358a:	438a      	bics	r2, r1
 800358c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fba5 	bl	8003cf0 <UART_CheckIdleState>
 80035a6:	0003      	movs	r3, r0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	ffffb7ff 	.word	0xffffb7ff

080035b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	@ 0x28
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d000      	beq.n	80035ce <HAL_UART_Transmit+0x1a>
 80035cc:	e08c      	b.n	80036e8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_UART_Transmit+0x28>
 80035d4:	1dbb      	adds	r3, r7, #6
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e084      	b.n	80036ea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	015b      	lsls	r3, r3, #5
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d109      	bne.n	8003600 <HAL_UART_Transmit+0x4c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2201      	movs	r2, #1
 80035f8:	4013      	ands	r3, r2
 80035fa:	d001      	beq.n	8003600 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e074      	b.n	80036ea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2284      	movs	r2, #132	@ 0x84
 8003604:	2100      	movs	r1, #0
 8003606:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2221      	movs	r2, #33	@ 0x21
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800360e:	f7fd ffa9 	bl	8001564 <HAL_GetTick>
 8003612:	0003      	movs	r3, r0
 8003614:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1dba      	adds	r2, r7, #6
 800361a:	2150      	movs	r1, #80	@ 0x50
 800361c:	8812      	ldrh	r2, [r2, #0]
 800361e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1dba      	adds	r2, r7, #6
 8003624:	2152      	movs	r1, #82	@ 0x52
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	429a      	cmp	r2, r3
 8003634:	d108      	bne.n	8003648 <HAL_UART_Transmit+0x94>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	e003      	b.n	8003650 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003650:	e02f      	b.n	80036b2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	0013      	movs	r3, r2
 800365c:	2200      	movs	r2, #0
 800365e:	2180      	movs	r1, #128	@ 0x80
 8003660:	f000 fbee 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d004      	beq.n	8003672 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e03b      	b.n	80036ea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	001a      	movs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	05d2      	lsls	r2, r2, #23
 8003684:	0dd2      	lsrs	r2, r2, #23
 8003686:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	3302      	adds	r3, #2
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e007      	b.n	80036a0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2252      	movs	r2, #82	@ 0x52
 80036a4:	5a9b      	ldrh	r3, [r3, r2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b299      	uxth	r1, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2252      	movs	r2, #82	@ 0x52
 80036b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2252      	movs	r2, #82	@ 0x52
 80036b6:	5a9b      	ldrh	r3, [r3, r2]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1c9      	bne.n	8003652 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	0013      	movs	r3, r2
 80036c8:	2200      	movs	r2, #0
 80036ca:	2140      	movs	r1, #64	@ 0x40
 80036cc:	f000 fbb8 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d004      	beq.n	80036de <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e005      	b.n	80036ea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b008      	add	sp, #32
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f4:	b5b0      	push	{r4, r5, r7, lr}
 80036f6:	b08e      	sub	sp, #56	@ 0x38
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036fc:	231a      	movs	r3, #26
 80036fe:	2218      	movs	r2, #24
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4313      	orrs	r3, r2
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4ab4      	ldr	r2, [pc, #720]	@ (80039f8 <UART_SetConfig+0x304>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4aaf      	ldr	r2, [pc, #700]	@ (80039fc <UART_SetConfig+0x308>)
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4aa9      	ldr	r2, [pc, #676]	@ (8003a00 <UART_SetConfig+0x30c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003764:	4313      	orrs	r3, r2
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4aa5      	ldr	r2, [pc, #660]	@ (8003a04 <UART_SetConfig+0x310>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4aa1      	ldr	r2, [pc, #644]	@ (8003a08 <UART_SetConfig+0x314>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d131      	bne.n	80037ec <UART_SetConfig+0xf8>
 8003788:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <UART_SetConfig+0x318>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378c:	220c      	movs	r2, #12
 800378e:	4013      	ands	r3, r2
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d01d      	beq.n	80037d0 <UART_SetConfig+0xdc>
 8003794:	d823      	bhi.n	80037de <UART_SetConfig+0xea>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d00c      	beq.n	80037b4 <UART_SetConfig+0xc0>
 800379a:	d820      	bhi.n	80037de <UART_SetConfig+0xea>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <UART_SetConfig+0xb2>
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d00e      	beq.n	80037c2 <UART_SetConfig+0xce>
 80037a4:	e01b      	b.n	80037de <UART_SetConfig+0xea>
 80037a6:	231b      	movs	r3, #27
 80037a8:	2218      	movs	r2, #24
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	19db      	adds	r3, r3, r7
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e065      	b.n	8003880 <UART_SetConfig+0x18c>
 80037b4:	231b      	movs	r3, #27
 80037b6:	2218      	movs	r2, #24
 80037b8:	189b      	adds	r3, r3, r2
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e05e      	b.n	8003880 <UART_SetConfig+0x18c>
 80037c2:	231b      	movs	r3, #27
 80037c4:	2218      	movs	r2, #24
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	19db      	adds	r3, r3, r7
 80037ca:	2204      	movs	r2, #4
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e057      	b.n	8003880 <UART_SetConfig+0x18c>
 80037d0:	231b      	movs	r3, #27
 80037d2:	2218      	movs	r2, #24
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	19db      	adds	r3, r3, r7
 80037d8:	2208      	movs	r2, #8
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e050      	b.n	8003880 <UART_SetConfig+0x18c>
 80037de:	231b      	movs	r3, #27
 80037e0:	2218      	movs	r2, #24
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	19db      	adds	r3, r3, r7
 80037e6:	2210      	movs	r2, #16
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e049      	b.n	8003880 <UART_SetConfig+0x18c>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a83      	ldr	r2, [pc, #524]	@ (8003a00 <UART_SetConfig+0x30c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d13e      	bne.n	8003874 <UART_SetConfig+0x180>
 80037f6:	4b85      	ldr	r3, [pc, #532]	@ (8003a0c <UART_SetConfig+0x318>)
 80037f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037fa:	23c0      	movs	r3, #192	@ 0xc0
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	22c0      	movs	r2, #192	@ 0xc0
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <UART_SetConfig+0x164>
 8003808:	22c0      	movs	r2, #192	@ 0xc0
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	4293      	cmp	r3, r2
 800380e:	d82a      	bhi.n	8003866 <UART_SetConfig+0x172>
 8003810:	2280      	movs	r2, #128	@ 0x80
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	4293      	cmp	r3, r2
 8003816:	d011      	beq.n	800383c <UART_SetConfig+0x148>
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	4293      	cmp	r3, r2
 800381e:	d822      	bhi.n	8003866 <UART_SetConfig+0x172>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <UART_SetConfig+0x13a>
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	00d2      	lsls	r2, r2, #3
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <UART_SetConfig+0x156>
 800382c:	e01b      	b.n	8003866 <UART_SetConfig+0x172>
 800382e:	231b      	movs	r3, #27
 8003830:	2218      	movs	r2, #24
 8003832:	189b      	adds	r3, r3, r2
 8003834:	19db      	adds	r3, r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e021      	b.n	8003880 <UART_SetConfig+0x18c>
 800383c:	231b      	movs	r3, #27
 800383e:	2218      	movs	r2, #24
 8003840:	189b      	adds	r3, r3, r2
 8003842:	19db      	adds	r3, r3, r7
 8003844:	2202      	movs	r2, #2
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e01a      	b.n	8003880 <UART_SetConfig+0x18c>
 800384a:	231b      	movs	r3, #27
 800384c:	2218      	movs	r2, #24
 800384e:	189b      	adds	r3, r3, r2
 8003850:	19db      	adds	r3, r3, r7
 8003852:	2204      	movs	r2, #4
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e013      	b.n	8003880 <UART_SetConfig+0x18c>
 8003858:	231b      	movs	r3, #27
 800385a:	2218      	movs	r2, #24
 800385c:	189b      	adds	r3, r3, r2
 800385e:	19db      	adds	r3, r3, r7
 8003860:	2208      	movs	r2, #8
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e00c      	b.n	8003880 <UART_SetConfig+0x18c>
 8003866:	231b      	movs	r3, #27
 8003868:	2218      	movs	r2, #24
 800386a:	189b      	adds	r3, r3, r2
 800386c:	19db      	adds	r3, r3, r7
 800386e:	2210      	movs	r2, #16
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <UART_SetConfig+0x18c>
 8003874:	231b      	movs	r3, #27
 8003876:	2218      	movs	r2, #24
 8003878:	189b      	adds	r3, r3, r2
 800387a:	19db      	adds	r3, r3, r7
 800387c:	2210      	movs	r2, #16
 800387e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5e      	ldr	r2, [pc, #376]	@ (8003a00 <UART_SetConfig+0x30c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d000      	beq.n	800388c <UART_SetConfig+0x198>
 800388a:	e084      	b.n	8003996 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800388c:	231b      	movs	r3, #27
 800388e:	2218      	movs	r2, #24
 8003890:	189b      	adds	r3, r3, r2
 8003892:	19db      	adds	r3, r3, r7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b08      	cmp	r3, #8
 8003898:	d01d      	beq.n	80038d6 <UART_SetConfig+0x1e2>
 800389a:	dc20      	bgt.n	80038de <UART_SetConfig+0x1ea>
 800389c:	2b04      	cmp	r3, #4
 800389e:	d015      	beq.n	80038cc <UART_SetConfig+0x1d8>
 80038a0:	dc1d      	bgt.n	80038de <UART_SetConfig+0x1ea>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <UART_SetConfig+0x1b8>
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d005      	beq.n	80038b6 <UART_SetConfig+0x1c2>
 80038aa:	e018      	b.n	80038de <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7ff fcd6 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 80038b0:	0003      	movs	r3, r0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038b4:	e01c      	b.n	80038f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b6:	4b55      	ldr	r3, [pc, #340]	@ (8003a0c <UART_SetConfig+0x318>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	4013      	ands	r3, r2
 80038be:	d002      	beq.n	80038c6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <UART_SetConfig+0x31c>)
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038c4:	e014      	b.n	80038f0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80038c6:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <UART_SetConfig+0x320>)
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038ca:	e011      	b.n	80038f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038cc:	f7ff fc18 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80038d0:	0003      	movs	r3, r0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038d4:	e00c      	b.n	80038f0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038dc:	e008      	b.n	80038f0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80038e2:	231a      	movs	r3, #26
 80038e4:	2218      	movs	r2, #24
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
        break;
 80038ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d100      	bne.n	80038f8 <UART_SetConfig+0x204>
 80038f6:	e12f      	b.n	8003b58 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	0013      	movs	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	189b      	adds	r3, r3, r2
 8003902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003904:	429a      	cmp	r2, r3
 8003906:	d305      	bcc.n	8003914 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003910:	429a      	cmp	r2, r3
 8003912:	d906      	bls.n	8003922 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003914:	231a      	movs	r3, #26
 8003916:	2218      	movs	r2, #24
 8003918:	189b      	adds	r3, r3, r2
 800391a:	19db      	adds	r3, r3, r7
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e11a      	b.n	8003b58 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	000b      	movs	r3, r1
 8003930:	0e1b      	lsrs	r3, r3, #24
 8003932:	0010      	movs	r0, r2
 8003934:	0205      	lsls	r5, r0, #8
 8003936:	431d      	orrs	r5, r3
 8003938:	000b      	movs	r3, r1
 800393a:	021c      	lsls	r4, r3, #8
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68b8      	ldr	r0, [r7, #8]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	1900      	adds	r0, r0, r4
 800394e:	4169      	adcs	r1, r5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f7fc fc71 	bl	8000244 <__aeabi_uldivmod>
 8003962:	0002      	movs	r2, r0
 8003964:	000b      	movs	r3, r1
 8003966:	0013      	movs	r3, r2
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800396a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800396c:	23c0      	movs	r3, #192	@ 0xc0
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d309      	bcc.n	8003988 <UART_SetConfig+0x294>
 8003974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	035b      	lsls	r3, r3, #13
 800397a:	429a      	cmp	r2, r3
 800397c:	d204      	bcs.n	8003988 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e0e7      	b.n	8003b58 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003988:	231a      	movs	r3, #26
 800398a:	2218      	movs	r2, #24
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e0e0      	b.n	8003b58 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	429a      	cmp	r2, r3
 80039a0:	d000      	beq.n	80039a4 <UART_SetConfig+0x2b0>
 80039a2:	e082      	b.n	8003aaa <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80039a4:	231b      	movs	r3, #27
 80039a6:	2218      	movs	r2, #24
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	19db      	adds	r3, r3, r7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d834      	bhi.n	8003a1c <UART_SetConfig+0x328>
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <UART_SetConfig+0x324>)
 80039b6:	18d3      	adds	r3, r2, r3
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7ff fc4e 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 80039c0:	0003      	movs	r3, r0
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039c4:	e033      	b.n	8003a2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c6:	f7ff fc5f 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 80039ca:	0003      	movs	r3, r0
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ce:	e02e      	b.n	8003a2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <UART_SetConfig+0x318>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2210      	movs	r2, #16
 80039d6:	4013      	ands	r3, r2
 80039d8:	d002      	beq.n	80039e0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <UART_SetConfig+0x31c>)
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039de:	e026      	b.n	8003a2e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <UART_SetConfig+0x320>)
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039e4:	e023      	b.n	8003a2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7ff fb8b 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80039ea:	0003      	movs	r3, r0
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ee:	e01e      	b.n	8003a2e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039f6:	e01a      	b.n	8003a2e <UART_SetConfig+0x33a>
 80039f8:	efff69f3 	.word	0xefff69f3
 80039fc:	ffffcfff 	.word	0xffffcfff
 8003a00:	40004800 	.word	0x40004800
 8003a04:	fffff4ff 	.word	0xfffff4ff
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	003d0900 	.word	0x003d0900
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	080049ac 	.word	0x080049ac
      default:
        pclk = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003a20:	231a      	movs	r3, #26
 8003a22:	2218      	movs	r2, #24
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	19db      	adds	r3, r3, r7
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
        break;
 8003a2c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d100      	bne.n	8003a36 <UART_SetConfig+0x342>
 8003a34:	e090      	b.n	8003b58 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	18d2      	adds	r2, r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0019      	movs	r1, r3
 8003a48:	0010      	movs	r0, r2
 8003a4a:	f7fc fb6f 	bl	800012c <__udivsi3>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d921      	bls.n	8003a9c <UART_SetConfig+0x3a8>
 8003a58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	025b      	lsls	r3, r3, #9
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d21c      	bcs.n	8003a9c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	200e      	movs	r0, #14
 8003a68:	2418      	movs	r4, #24
 8003a6a:	1903      	adds	r3, r0, r4
 8003a6c:	19db      	adds	r3, r3, r7
 8003a6e:	210f      	movs	r1, #15
 8003a70:	438a      	bics	r2, r1
 8003a72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b299      	uxth	r1, r3
 8003a80:	1903      	adds	r3, r0, r4
 8003a82:	19db      	adds	r3, r3, r7
 8003a84:	1902      	adds	r2, r0, r4
 8003a86:	19d2      	adds	r2, r2, r7
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1902      	adds	r2, r0, r4
 8003a94:	19d2      	adds	r2, r2, r7
 8003a96:	8812      	ldrh	r2, [r2, #0]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e05d      	b.n	8003b58 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9c:	231a      	movs	r3, #26
 8003a9e:	2218      	movs	r2, #24
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e056      	b.n	8003b58 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aaa:	231b      	movs	r3, #27
 8003aac:	2218      	movs	r2, #24
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d822      	bhi.n	8003afe <UART_SetConfig+0x40a>
 8003ab8:	009a      	lsls	r2, r3, #2
 8003aba:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <UART_SetConfig+0x484>)
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7ff fbcb 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aca:	e021      	b.n	8003b10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7ff fbdc 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ad4:	e01c      	b.n	8003b10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <UART_SetConfig+0x488>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2210      	movs	r2, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <UART_SetConfig+0x48c>)
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ae4:	e014      	b.n	8003b10 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003ae6:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <UART_SetConfig+0x490>)
 8003ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aea:	e011      	b.n	8003b10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aec:	f7ff fb08 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 8003af0:	0003      	movs	r3, r0
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003af4:	e00c      	b.n	8003b10 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003afc:	e008      	b.n	8003b10 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003b02:	231a      	movs	r3, #26
 8003b04:	2218      	movs	r2, #24
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	19db      	adds	r3, r3, r7
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
        break;
 8003b0e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085a      	lsrs	r2, r3, #1
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	18d2      	adds	r2, r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0019      	movs	r1, r3
 8003b26:	0010      	movs	r0, r2
 8003b28:	f7fc fb00 	bl	800012c <__udivsi3>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	d90a      	bls.n	8003b4c <UART_SetConfig+0x458>
 8003b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d205      	bcs.n	8003b4c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	e005      	b.n	8003b58 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003b4c:	231a      	movs	r3, #26
 8003b4e:	2218      	movs	r2, #24
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2200      	movs	r2, #0
 8003b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b64:	231a      	movs	r3, #26
 8003b66:	2218      	movs	r2, #24
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	781b      	ldrb	r3, [r3, #0]
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b00e      	add	sp, #56	@ 0x38
 8003b74:	bdb0      	pop	{r4, r5, r7, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	080049d0 	.word	0x080049d0
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	003d0900 	.word	0x003d0900
 8003b84:	00f42400 	.word	0x00f42400

08003b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	2201      	movs	r2, #1
 8003b96:	4013      	ands	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <UART_AdvFeatureConfig+0x144>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4a43      	ldr	r2, [pc, #268]	@ (8003cd0 <UART_AdvFeatureConfig+0x148>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd4 <UART_AdvFeatureConfig+0x14c>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a34      	ldr	r2, [pc, #208]	@ (8003cd8 <UART_AdvFeatureConfig+0x150>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <UART_AdvFeatureConfig+0x154>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2220      	movs	r2, #32
 8003c40:	4013      	ands	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	@ (8003ce0 <UART_AdvFeatureConfig+0x158>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	2240      	movs	r2, #64	@ 0x40
 8003c62:	4013      	ands	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <UART_AdvFeatureConfig+0x15c>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	035b      	lsls	r3, r3, #13
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10b      	bne.n	8003ca2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4a15      	ldr	r2, [pc, #84]	@ (8003ce8 <UART_AdvFeatureConfig+0x160>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	0019      	movs	r1, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cec <UART_AdvFeatureConfig+0x164>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	fffdffff 	.word	0xfffdffff
 8003cd0:	fffeffff 	.word	0xfffeffff
 8003cd4:	fffbffff 	.word	0xfffbffff
 8003cd8:	ffff7fff 	.word	0xffff7fff
 8003cdc:	ffffefff 	.word	0xffffefff
 8003ce0:	ffffdfff 	.word	0xffffdfff
 8003ce4:	ffefffff 	.word	0xffefffff
 8003ce8:	ff9fffff 	.word	0xff9fffff
 8003cec:	fff7ffff 	.word	0xfff7ffff

08003cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b092      	sub	sp, #72	@ 0x48
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2284      	movs	r2, #132	@ 0x84
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d00:	f7fd fc30 	bl	8001564 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d12c      	bne.n	8003d70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d18:	2280      	movs	r2, #128	@ 0x80
 8003d1a:	0391      	lsls	r1, r2, #14
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4a46      	ldr	r2, [pc, #280]	@ (8003e38 <UART_CheckIdleState+0x148>)
 8003d20:	9200      	str	r2, [sp, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f000 f88c 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d021      	beq.n	8003d70 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d36:	2301      	movs	r3, #1
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2180      	movs	r1, #128	@ 0x80
 8003d4e:	438a      	bics	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2278      	movs	r2, #120	@ 0x78
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e05f      	b.n	8003e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d146      	bne.n	8003e0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	03d1      	lsls	r1, r2, #15
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	@ (8003e38 <UART_CheckIdleState+0x148>)
 8003d88:	9200      	str	r2, [sp, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f000 f858 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d03b      	beq.n	8003e0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d94:	f3ef 8310 	mrs	r3, PRIMASK
 8003d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d9e:	2301      	movs	r3, #1
 8003da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4921      	ldr	r1, [pc, #132]	@ (8003e3c <UART_CheckIdleState+0x14c>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2101      	movs	r1, #1
 8003de8:	438a      	bics	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	2120      	movs	r1, #32
 8003dfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2278      	movs	r2, #120	@ 0x78
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e011      	b.n	8003e30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2280      	movs	r2, #128	@ 0x80
 8003e16:	2120      	movs	r1, #32
 8003e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2278      	movs	r2, #120	@ 0x78
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b010      	add	sp, #64	@ 0x40
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	01ffffff 	.word	0x01ffffff
 8003e3c:	fffffedf 	.word	0xfffffedf

08003e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e50:	e04b      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	3301      	adds	r3, #1
 8003e56:	d048      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e58:	f7fd fb84 	bl	8001564 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e04b      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d035      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2208      	movs	r2, #8
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d111      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2208      	movs	r2, #8
 8003e92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 f83c 	bl	8003f14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2284      	movs	r2, #132	@ 0x84
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2278      	movs	r2, #120	@ 0x78
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e02c      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	@ 0x80
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	401a      	ands	r2, r3
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d112      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2280      	movs	r2, #128	@ 0x80
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 f81f 	bl	8003f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2284      	movs	r2, #132	@ 0x84
 8003eda:	2120      	movs	r1, #32
 8003edc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2278      	movs	r2, #120	@ 0x78
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e00f      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	425a      	negs	r2, r3
 8003efa:	4153      	adcs	r3, r2
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d0a4      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	@ 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f20:	617b      	str	r3, [r7, #20]
  return(result);
 8003f22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f383 8810 	msr	PRIMASK, r3
}
 8003f30:	46c0      	nop			@ (mov r8, r8)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4926      	ldr	r1, [pc, #152]	@ (8003fd8 <UART_EndRxTransfer+0xc4>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f383 8810 	msr	PRIMASK, r3
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f52:	623b      	str	r3, [r7, #32]
  return(result);
 8003f54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f58:	2301      	movs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	438a      	bics	r2, r1
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d118      	bne.n	8003fba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f92:	2301      	movs	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2110      	movs	r1, #16
 8003faa:	438a      	bics	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2280      	movs	r2, #128	@ 0x80
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b00e      	add	sp, #56	@ 0x38
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	fffffedf 	.word	0xfffffedf

08003fdc <siprintf>:
 8003fdc:	b40e      	push	{r1, r2, r3}
 8003fde:	b500      	push	{lr}
 8003fe0:	490b      	ldr	r1, [pc, #44]	@ (8004010 <siprintf+0x34>)
 8003fe2:	b09c      	sub	sp, #112	@ 0x70
 8003fe4:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fe6:	9002      	str	r0, [sp, #8]
 8003fe8:	9006      	str	r0, [sp, #24]
 8003fea:	9107      	str	r1, [sp, #28]
 8003fec:	9104      	str	r1, [sp, #16]
 8003fee:	4809      	ldr	r0, [pc, #36]	@ (8004014 <siprintf+0x38>)
 8003ff0:	4909      	ldr	r1, [pc, #36]	@ (8004018 <siprintf+0x3c>)
 8003ff2:	cb04      	ldmia	r3!, {r2}
 8003ff4:	9105      	str	r1, [sp, #20]
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	a902      	add	r1, sp, #8
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	f000 f99e 	bl	800433c <_svfiprintf_r>
 8004000:	2200      	movs	r2, #0
 8004002:	9b02      	ldr	r3, [sp, #8]
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	b01c      	add	sp, #112	@ 0x70
 8004008:	bc08      	pop	{r3}
 800400a:	b003      	add	sp, #12
 800400c:	4718      	bx	r3
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	7fffffff 	.word	0x7fffffff
 8004014:	2000000c 	.word	0x2000000c
 8004018:	ffff0208 	.word	0xffff0208

0800401c <memset>:
 800401c:	0003      	movs	r3, r0
 800401e:	1882      	adds	r2, r0, r2
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	7019      	strb	r1, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <__errno>:
 800402c:	4b01      	ldr	r3, [pc, #4]	@ (8004034 <__errno+0x8>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	4770      	bx	lr
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	2000000c 	.word	0x2000000c

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	2600      	movs	r6, #0
 800403c:	4c0c      	ldr	r4, [pc, #48]	@ (8004070 <__libc_init_array+0x38>)
 800403e:	4d0d      	ldr	r5, [pc, #52]	@ (8004074 <__libc_init_array+0x3c>)
 8004040:	1b64      	subs	r4, r4, r5
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	2600      	movs	r6, #0
 800404a:	f000 fc65 	bl	8004918 <_init>
 800404e:	4c0a      	ldr	r4, [pc, #40]	@ (8004078 <__libc_init_array+0x40>)
 8004050:	4d0a      	ldr	r5, [pc, #40]	@ (800407c <__libc_init_array+0x44>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	00b3      	lsls	r3, r6, #2
 800405e:	58eb      	ldr	r3, [r5, r3]
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	00b3      	lsls	r3, r6, #2
 8004068:	58eb      	ldr	r3, [r5, r3]
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	08004a30 	.word	0x08004a30
 8004074:	08004a30 	.word	0x08004a30
 8004078:	08004a34 	.word	0x08004a34
 800407c:	08004a30 	.word	0x08004a30

08004080 <__retarget_lock_acquire_recursive>:
 8004080:	4770      	bx	lr

08004082 <__retarget_lock_release_recursive>:
 8004082:	4770      	bx	lr

08004084 <_free_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	0005      	movs	r5, r0
 8004088:	1e0c      	subs	r4, r1, #0
 800408a:	d010      	beq.n	80040ae <_free_r+0x2a>
 800408c:	3c04      	subs	r4, #4
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da00      	bge.n	8004096 <_free_r+0x12>
 8004094:	18e4      	adds	r4, r4, r3
 8004096:	0028      	movs	r0, r5
 8004098:	f000 f8e0 	bl	800425c <__malloc_lock>
 800409c:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <_free_r+0x90>)
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <_free_r+0x2c>
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6014      	str	r4, [r2, #0]
 80040a8:	0028      	movs	r0, r5
 80040aa:	f000 f8df 	bl	800426c <__malloc_unlock>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	42a3      	cmp	r3, r4
 80040b2:	d908      	bls.n	80040c6 <_free_r+0x42>
 80040b4:	6820      	ldr	r0, [r4, #0]
 80040b6:	1821      	adds	r1, r4, r0
 80040b8:	428b      	cmp	r3, r1
 80040ba:	d1f3      	bne.n	80040a4 <_free_r+0x20>
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	1809      	adds	r1, r1, r0
 80040c2:	6021      	str	r1, [r4, #0]
 80040c4:	e7ee      	b.n	80040a4 <_free_r+0x20>
 80040c6:	001a      	movs	r2, r3
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <_free_r+0x4e>
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	d9f9      	bls.n	80040c6 <_free_r+0x42>
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	1850      	adds	r0, r2, r1
 80040d6:	42a0      	cmp	r0, r4
 80040d8:	d10b      	bne.n	80040f2 <_free_r+0x6e>
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	1809      	adds	r1, r1, r0
 80040de:	1850      	adds	r0, r2, r1
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	4283      	cmp	r3, r0
 80040e4:	d1e0      	bne.n	80040a8 <_free_r+0x24>
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	1841      	adds	r1, r0, r1
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	6053      	str	r3, [r2, #4]
 80040f0:	e7da      	b.n	80040a8 <_free_r+0x24>
 80040f2:	42a0      	cmp	r0, r4
 80040f4:	d902      	bls.n	80040fc <_free_r+0x78>
 80040f6:	230c      	movs	r3, #12
 80040f8:	602b      	str	r3, [r5, #0]
 80040fa:	e7d5      	b.n	80040a8 <_free_r+0x24>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	1821      	adds	r1, r4, r0
 8004100:	428b      	cmp	r3, r1
 8004102:	d103      	bne.n	800410c <_free_r+0x88>
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	1809      	adds	r1, r1, r0
 800410a:	6021      	str	r1, [r4, #0]
 800410c:	6063      	str	r3, [r4, #4]
 800410e:	6054      	str	r4, [r2, #4]
 8004110:	e7ca      	b.n	80040a8 <_free_r+0x24>
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	200002a8 	.word	0x200002a8

08004118 <sbrk_aligned>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0f      	ldr	r6, [pc, #60]	@ (8004158 <sbrk_aligned+0x40>)
 800411c:	000d      	movs	r5, r1
 800411e:	6831      	ldr	r1, [r6, #0]
 8004120:	0004      	movs	r4, r0
 8004122:	2900      	cmp	r1, #0
 8004124:	d102      	bne.n	800412c <sbrk_aligned+0x14>
 8004126:	f000 fb99 	bl	800485c <_sbrk_r>
 800412a:	6030      	str	r0, [r6, #0]
 800412c:	0029      	movs	r1, r5
 800412e:	0020      	movs	r0, r4
 8004130:	f000 fb94 	bl	800485c <_sbrk_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d103      	bne.n	8004140 <sbrk_aligned+0x28>
 8004138:	2501      	movs	r5, #1
 800413a:	426d      	negs	r5, r5
 800413c:	0028      	movs	r0, r5
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	2303      	movs	r3, #3
 8004142:	1cc5      	adds	r5, r0, #3
 8004144:	439d      	bics	r5, r3
 8004146:	42a8      	cmp	r0, r5
 8004148:	d0f8      	beq.n	800413c <sbrk_aligned+0x24>
 800414a:	1a29      	subs	r1, r5, r0
 800414c:	0020      	movs	r0, r4
 800414e:	f000 fb85 	bl	800485c <_sbrk_r>
 8004152:	3001      	adds	r0, #1
 8004154:	d1f2      	bne.n	800413c <sbrk_aligned+0x24>
 8004156:	e7ef      	b.n	8004138 <sbrk_aligned+0x20>
 8004158:	200002a4 	.word	0x200002a4

0800415c <_malloc_r>:
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	2203      	movs	r2, #3
 8004160:	1ccb      	adds	r3, r1, #3
 8004162:	4393      	bics	r3, r2
 8004164:	3308      	adds	r3, #8
 8004166:	0005      	movs	r5, r0
 8004168:	001f      	movs	r7, r3
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d234      	bcs.n	80041d8 <_malloc_r+0x7c>
 800416e:	270c      	movs	r7, #12
 8004170:	42b9      	cmp	r1, r7
 8004172:	d833      	bhi.n	80041dc <_malloc_r+0x80>
 8004174:	0028      	movs	r0, r5
 8004176:	f000 f871 	bl	800425c <__malloc_lock>
 800417a:	4e37      	ldr	r6, [pc, #220]	@ (8004258 <_malloc_r+0xfc>)
 800417c:	6833      	ldr	r3, [r6, #0]
 800417e:	001c      	movs	r4, r3
 8004180:	2c00      	cmp	r4, #0
 8004182:	d12f      	bne.n	80041e4 <_malloc_r+0x88>
 8004184:	0039      	movs	r1, r7
 8004186:	0028      	movs	r0, r5
 8004188:	f7ff ffc6 	bl	8004118 <sbrk_aligned>
 800418c:	0004      	movs	r4, r0
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	d15f      	bne.n	8004252 <_malloc_r+0xf6>
 8004192:	6834      	ldr	r4, [r6, #0]
 8004194:	9400      	str	r4, [sp, #0]
 8004196:	9b00      	ldr	r3, [sp, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d14a      	bne.n	8004232 <_malloc_r+0xd6>
 800419c:	2c00      	cmp	r4, #0
 800419e:	d052      	beq.n	8004246 <_malloc_r+0xea>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	0028      	movs	r0, r5
 80041a4:	18e3      	adds	r3, r4, r3
 80041a6:	9900      	ldr	r1, [sp, #0]
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	f000 fb57 	bl	800485c <_sbrk_r>
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	4283      	cmp	r3, r0
 80041b2:	d148      	bne.n	8004246 <_malloc_r+0xea>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	0028      	movs	r0, r5
 80041b8:	1aff      	subs	r7, r7, r3
 80041ba:	0039      	movs	r1, r7
 80041bc:	f7ff ffac 	bl	8004118 <sbrk_aligned>
 80041c0:	3001      	adds	r0, #1
 80041c2:	d040      	beq.n	8004246 <_malloc_r+0xea>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	6833      	ldr	r3, [r6, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d133      	bne.n	800423a <_malloc_r+0xde>
 80041d2:	9b00      	ldr	r3, [sp, #0]
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	e019      	b.n	800420c <_malloc_r+0xb0>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dac9      	bge.n	8004170 <_malloc_r+0x14>
 80041dc:	230c      	movs	r3, #12
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	2000      	movs	r0, #0
 80041e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041e4:	6821      	ldr	r1, [r4, #0]
 80041e6:	1bc9      	subs	r1, r1, r7
 80041e8:	d420      	bmi.n	800422c <_malloc_r+0xd0>
 80041ea:	290b      	cmp	r1, #11
 80041ec:	d90a      	bls.n	8004204 <_malloc_r+0xa8>
 80041ee:	19e2      	adds	r2, r4, r7
 80041f0:	6027      	str	r7, [r4, #0]
 80041f2:	42a3      	cmp	r3, r4
 80041f4:	d104      	bne.n	8004200 <_malloc_r+0xa4>
 80041f6:	6032      	str	r2, [r6, #0]
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	6011      	str	r1, [r2, #0]
 80041fc:	6053      	str	r3, [r2, #4]
 80041fe:	e005      	b.n	800420c <_malloc_r+0xb0>
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e7f9      	b.n	80041f8 <_malloc_r+0x9c>
 8004204:	6862      	ldr	r2, [r4, #4]
 8004206:	42a3      	cmp	r3, r4
 8004208:	d10e      	bne.n	8004228 <_malloc_r+0xcc>
 800420a:	6032      	str	r2, [r6, #0]
 800420c:	0028      	movs	r0, r5
 800420e:	f000 f82d 	bl	800426c <__malloc_unlock>
 8004212:	0020      	movs	r0, r4
 8004214:	2207      	movs	r2, #7
 8004216:	300b      	adds	r0, #11
 8004218:	1d23      	adds	r3, r4, #4
 800421a:	4390      	bics	r0, r2
 800421c:	1ac2      	subs	r2, r0, r3
 800421e:	4298      	cmp	r0, r3
 8004220:	d0df      	beq.n	80041e2 <_malloc_r+0x86>
 8004222:	1a1b      	subs	r3, r3, r0
 8004224:	50a3      	str	r3, [r4, r2]
 8004226:	e7dc      	b.n	80041e2 <_malloc_r+0x86>
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e7ef      	b.n	800420c <_malloc_r+0xb0>
 800422c:	0023      	movs	r3, r4
 800422e:	6864      	ldr	r4, [r4, #4]
 8004230:	e7a6      	b.n	8004180 <_malloc_r+0x24>
 8004232:	9c00      	ldr	r4, [sp, #0]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	e7ad      	b.n	8004196 <_malloc_r+0x3a>
 800423a:	001a      	movs	r2, r3
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	42a3      	cmp	r3, r4
 8004240:	d1fb      	bne.n	800423a <_malloc_r+0xde>
 8004242:	2300      	movs	r3, #0
 8004244:	e7da      	b.n	80041fc <_malloc_r+0xa0>
 8004246:	230c      	movs	r3, #12
 8004248:	0028      	movs	r0, r5
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f000 f80e 	bl	800426c <__malloc_unlock>
 8004250:	e7c6      	b.n	80041e0 <_malloc_r+0x84>
 8004252:	6007      	str	r7, [r0, #0]
 8004254:	e7da      	b.n	800420c <_malloc_r+0xb0>
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	200002a8 	.word	0x200002a8

0800425c <__malloc_lock>:
 800425c:	b510      	push	{r4, lr}
 800425e:	4802      	ldr	r0, [pc, #8]	@ (8004268 <__malloc_lock+0xc>)
 8004260:	f7ff ff0e 	bl	8004080 <__retarget_lock_acquire_recursive>
 8004264:	bd10      	pop	{r4, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	200002a0 	.word	0x200002a0

0800426c <__malloc_unlock>:
 800426c:	b510      	push	{r4, lr}
 800426e:	4802      	ldr	r0, [pc, #8]	@ (8004278 <__malloc_unlock+0xc>)
 8004270:	f7ff ff07 	bl	8004082 <__retarget_lock_release_recursive>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	200002a0 	.word	0x200002a0

0800427c <__ssputs_r>:
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	688e      	ldr	r6, [r1, #8]
 8004280:	b085      	sub	sp, #20
 8004282:	001f      	movs	r7, r3
 8004284:	000c      	movs	r4, r1
 8004286:	680b      	ldr	r3, [r1, #0]
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	42be      	cmp	r6, r7
 800428e:	d830      	bhi.n	80042f2 <__ssputs_r+0x76>
 8004290:	210c      	movs	r1, #12
 8004292:	5e62      	ldrsh	r2, [r4, r1]
 8004294:	2190      	movs	r1, #144	@ 0x90
 8004296:	00c9      	lsls	r1, r1, #3
 8004298:	420a      	tst	r2, r1
 800429a:	d028      	beq.n	80042ee <__ssputs_r+0x72>
 800429c:	2003      	movs	r0, #3
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	1a5b      	subs	r3, r3, r1
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	4343      	muls	r3, r0
 80042a8:	9801      	ldr	r0, [sp, #4]
 80042aa:	0fdd      	lsrs	r5, r3, #31
 80042ac:	18ed      	adds	r5, r5, r3
 80042ae:	1c7b      	adds	r3, r7, #1
 80042b0:	181b      	adds	r3, r3, r0
 80042b2:	106d      	asrs	r5, r5, #1
 80042b4:	42ab      	cmp	r3, r5
 80042b6:	d900      	bls.n	80042ba <__ssputs_r+0x3e>
 80042b8:	001d      	movs	r5, r3
 80042ba:	0552      	lsls	r2, r2, #21
 80042bc:	d528      	bpl.n	8004310 <__ssputs_r+0x94>
 80042be:	0029      	movs	r1, r5
 80042c0:	9802      	ldr	r0, [sp, #8]
 80042c2:	f7ff ff4b 	bl	800415c <_malloc_r>
 80042c6:	1e06      	subs	r6, r0, #0
 80042c8:	d02c      	beq.n	8004324 <__ssputs_r+0xa8>
 80042ca:	9a01      	ldr	r2, [sp, #4]
 80042cc:	6921      	ldr	r1, [r4, #16]
 80042ce:	f000 fae2 	bl	8004896 <memcpy>
 80042d2:	89a2      	ldrh	r2, [r4, #12]
 80042d4:	4b18      	ldr	r3, [pc, #96]	@ (8004338 <__ssputs_r+0xbc>)
 80042d6:	401a      	ands	r2, r3
 80042d8:	2380      	movs	r3, #128	@ 0x80
 80042da:	4313      	orrs	r3, r2
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	9b01      	ldr	r3, [sp, #4]
 80042e0:	6126      	str	r6, [r4, #16]
 80042e2:	18f6      	adds	r6, r6, r3
 80042e4:	6026      	str	r6, [r4, #0]
 80042e6:	003e      	movs	r6, r7
 80042e8:	6165      	str	r5, [r4, #20]
 80042ea:	1aed      	subs	r5, r5, r3
 80042ec:	60a5      	str	r5, [r4, #8]
 80042ee:	42be      	cmp	r6, r7
 80042f0:	d900      	bls.n	80042f4 <__ssputs_r+0x78>
 80042f2:	003e      	movs	r6, r7
 80042f4:	0032      	movs	r2, r6
 80042f6:	9903      	ldr	r1, [sp, #12]
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	f000 fa9b 	bl	8004834 <memmove>
 80042fe:	2000      	movs	r0, #0
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	1b9b      	subs	r3, r3, r6
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	199b      	adds	r3, r3, r6
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	b005      	add	sp, #20
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	002a      	movs	r2, r5
 8004312:	9802      	ldr	r0, [sp, #8]
 8004314:	f000 fac8 	bl	80048a8 <_realloc_r>
 8004318:	1e06      	subs	r6, r0, #0
 800431a:	d1e0      	bne.n	80042de <__ssputs_r+0x62>
 800431c:	6921      	ldr	r1, [r4, #16]
 800431e:	9802      	ldr	r0, [sp, #8]
 8004320:	f7ff feb0 	bl	8004084 <_free_r>
 8004324:	230c      	movs	r3, #12
 8004326:	2001      	movs	r0, #1
 8004328:	9a02      	ldr	r2, [sp, #8]
 800432a:	4240      	negs	r0, r0
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	89a2      	ldrh	r2, [r4, #12]
 8004330:	3334      	adds	r3, #52	@ 0x34
 8004332:	4313      	orrs	r3, r2
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	e7e9      	b.n	800430c <__ssputs_r+0x90>
 8004338:	fffffb7f 	.word	0xfffffb7f

0800433c <_svfiprintf_r>:
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b0a1      	sub	sp, #132	@ 0x84
 8004340:	9003      	str	r0, [sp, #12]
 8004342:	001d      	movs	r5, r3
 8004344:	898b      	ldrh	r3, [r1, #12]
 8004346:	000f      	movs	r7, r1
 8004348:	0016      	movs	r6, r2
 800434a:	061b      	lsls	r3, r3, #24
 800434c:	d511      	bpl.n	8004372 <_svfiprintf_r+0x36>
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10e      	bne.n	8004372 <_svfiprintf_r+0x36>
 8004354:	2140      	movs	r1, #64	@ 0x40
 8004356:	f7ff ff01 	bl	800415c <_malloc_r>
 800435a:	6038      	str	r0, [r7, #0]
 800435c:	6138      	str	r0, [r7, #16]
 800435e:	2800      	cmp	r0, #0
 8004360:	d105      	bne.n	800436e <_svfiprintf_r+0x32>
 8004362:	230c      	movs	r3, #12
 8004364:	9a03      	ldr	r2, [sp, #12]
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	2001      	movs	r0, #1
 800436a:	4240      	negs	r0, r0
 800436c:	e0cf      	b.n	800450e <_svfiprintf_r+0x1d2>
 800436e:	2340      	movs	r3, #64	@ 0x40
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	2300      	movs	r3, #0
 8004374:	ac08      	add	r4, sp, #32
 8004376:	6163      	str	r3, [r4, #20]
 8004378:	3320      	adds	r3, #32
 800437a:	7663      	strb	r3, [r4, #25]
 800437c:	3310      	adds	r3, #16
 800437e:	76a3      	strb	r3, [r4, #26]
 8004380:	9507      	str	r5, [sp, #28]
 8004382:	0035      	movs	r5, r6
 8004384:	782b      	ldrb	r3, [r5, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <_svfiprintf_r+0x52>
 800438a:	2b25      	cmp	r3, #37	@ 0x25
 800438c:	d148      	bne.n	8004420 <_svfiprintf_r+0xe4>
 800438e:	1bab      	subs	r3, r5, r6
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	42b5      	cmp	r5, r6
 8004394:	d00b      	beq.n	80043ae <_svfiprintf_r+0x72>
 8004396:	0032      	movs	r2, r6
 8004398:	0039      	movs	r1, r7
 800439a:	9803      	ldr	r0, [sp, #12]
 800439c:	f7ff ff6e 	bl	800427c <__ssputs_r>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d100      	bne.n	80043a6 <_svfiprintf_r+0x6a>
 80043a4:	e0ae      	b.n	8004504 <_svfiprintf_r+0x1c8>
 80043a6:	6963      	ldr	r3, [r4, #20]
 80043a8:	9a05      	ldr	r2, [sp, #20]
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	6163      	str	r3, [r4, #20]
 80043ae:	782b      	ldrb	r3, [r5, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d100      	bne.n	80043b6 <_svfiprintf_r+0x7a>
 80043b4:	e0a6      	b.n	8004504 <_svfiprintf_r+0x1c8>
 80043b6:	2201      	movs	r2, #1
 80043b8:	2300      	movs	r3, #0
 80043ba:	4252      	negs	r2, r2
 80043bc:	6062      	str	r2, [r4, #4]
 80043be:	a904      	add	r1, sp, #16
 80043c0:	3254      	adds	r2, #84	@ 0x54
 80043c2:	1852      	adds	r2, r2, r1
 80043c4:	1c6e      	adds	r6, r5, #1
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	60e3      	str	r3, [r4, #12]
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	7013      	strb	r3, [r2, #0]
 80043ce:	65a3      	str	r3, [r4, #88]	@ 0x58
 80043d0:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <_svfiprintf_r+0x1e8>)
 80043d2:	2205      	movs	r2, #5
 80043d4:	0018      	movs	r0, r3
 80043d6:	7831      	ldrb	r1, [r6, #0]
 80043d8:	9305      	str	r3, [sp, #20]
 80043da:	f000 fa51 	bl	8004880 <memchr>
 80043de:	1c75      	adds	r5, r6, #1
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d11f      	bne.n	8004424 <_svfiprintf_r+0xe8>
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	06d3      	lsls	r3, r2, #27
 80043e8:	d504      	bpl.n	80043f4 <_svfiprintf_r+0xb8>
 80043ea:	2353      	movs	r3, #83	@ 0x53
 80043ec:	a904      	add	r1, sp, #16
 80043ee:	185b      	adds	r3, r3, r1
 80043f0:	2120      	movs	r1, #32
 80043f2:	7019      	strb	r1, [r3, #0]
 80043f4:	0713      	lsls	r3, r2, #28
 80043f6:	d504      	bpl.n	8004402 <_svfiprintf_r+0xc6>
 80043f8:	2353      	movs	r3, #83	@ 0x53
 80043fa:	a904      	add	r1, sp, #16
 80043fc:	185b      	adds	r3, r3, r1
 80043fe:	212b      	movs	r1, #43	@ 0x2b
 8004400:	7019      	strb	r1, [r3, #0]
 8004402:	7833      	ldrb	r3, [r6, #0]
 8004404:	2b2a      	cmp	r3, #42	@ 0x2a
 8004406:	d016      	beq.n	8004436 <_svfiprintf_r+0xfa>
 8004408:	0035      	movs	r5, r6
 800440a:	2100      	movs	r1, #0
 800440c:	200a      	movs	r0, #10
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	782a      	ldrb	r2, [r5, #0]
 8004412:	1c6e      	adds	r6, r5, #1
 8004414:	3a30      	subs	r2, #48	@ 0x30
 8004416:	2a09      	cmp	r2, #9
 8004418:	d950      	bls.n	80044bc <_svfiprintf_r+0x180>
 800441a:	2900      	cmp	r1, #0
 800441c:	d111      	bne.n	8004442 <_svfiprintf_r+0x106>
 800441e:	e017      	b.n	8004450 <_svfiprintf_r+0x114>
 8004420:	3501      	adds	r5, #1
 8004422:	e7af      	b.n	8004384 <_svfiprintf_r+0x48>
 8004424:	9b05      	ldr	r3, [sp, #20]
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	1ac0      	subs	r0, r0, r3
 800442a:	2301      	movs	r3, #1
 800442c:	4083      	lsls	r3, r0
 800442e:	4313      	orrs	r3, r2
 8004430:	002e      	movs	r6, r5
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	e7cc      	b.n	80043d0 <_svfiprintf_r+0x94>
 8004436:	9b07      	ldr	r3, [sp, #28]
 8004438:	1d19      	adds	r1, r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	9107      	str	r1, [sp, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	db01      	blt.n	8004446 <_svfiprintf_r+0x10a>
 8004442:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004444:	e004      	b.n	8004450 <_svfiprintf_r+0x114>
 8004446:	425b      	negs	r3, r3
 8004448:	60e3      	str	r3, [r4, #12]
 800444a:	2302      	movs	r3, #2
 800444c:	4313      	orrs	r3, r2
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	782b      	ldrb	r3, [r5, #0]
 8004452:	2b2e      	cmp	r3, #46	@ 0x2e
 8004454:	d10c      	bne.n	8004470 <_svfiprintf_r+0x134>
 8004456:	786b      	ldrb	r3, [r5, #1]
 8004458:	2b2a      	cmp	r3, #42	@ 0x2a
 800445a:	d134      	bne.n	80044c6 <_svfiprintf_r+0x18a>
 800445c:	9b07      	ldr	r3, [sp, #28]
 800445e:	3502      	adds	r5, #2
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	9207      	str	r2, [sp, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da01      	bge.n	800446e <_svfiprintf_r+0x132>
 800446a:	2301      	movs	r3, #1
 800446c:	425b      	negs	r3, r3
 800446e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004470:	4e2d      	ldr	r6, [pc, #180]	@ (8004528 <_svfiprintf_r+0x1ec>)
 8004472:	2203      	movs	r2, #3
 8004474:	0030      	movs	r0, r6
 8004476:	7829      	ldrb	r1, [r5, #0]
 8004478:	f000 fa02 	bl	8004880 <memchr>
 800447c:	2800      	cmp	r0, #0
 800447e:	d006      	beq.n	800448e <_svfiprintf_r+0x152>
 8004480:	2340      	movs	r3, #64	@ 0x40
 8004482:	1b80      	subs	r0, r0, r6
 8004484:	4083      	lsls	r3, r0
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	3501      	adds	r5, #1
 800448a:	4313      	orrs	r3, r2
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	7829      	ldrb	r1, [r5, #0]
 8004490:	2206      	movs	r2, #6
 8004492:	4826      	ldr	r0, [pc, #152]	@ (800452c <_svfiprintf_r+0x1f0>)
 8004494:	1c6e      	adds	r6, r5, #1
 8004496:	7621      	strb	r1, [r4, #24]
 8004498:	f000 f9f2 	bl	8004880 <memchr>
 800449c:	2800      	cmp	r0, #0
 800449e:	d038      	beq.n	8004512 <_svfiprintf_r+0x1d6>
 80044a0:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <_svfiprintf_r+0x1f4>)
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d122      	bne.n	80044ec <_svfiprintf_r+0x1b0>
 80044a6:	2207      	movs	r2, #7
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	3307      	adds	r3, #7
 80044ac:	4393      	bics	r3, r2
 80044ae:	3308      	adds	r3, #8
 80044b0:	9307      	str	r3, [sp, #28]
 80044b2:	6963      	ldr	r3, [r4, #20]
 80044b4:	9a04      	ldr	r2, [sp, #16]
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	6163      	str	r3, [r4, #20]
 80044ba:	e762      	b.n	8004382 <_svfiprintf_r+0x46>
 80044bc:	4343      	muls	r3, r0
 80044be:	0035      	movs	r5, r6
 80044c0:	2101      	movs	r1, #1
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	e7a4      	b.n	8004410 <_svfiprintf_r+0xd4>
 80044c6:	2300      	movs	r3, #0
 80044c8:	200a      	movs	r0, #10
 80044ca:	0019      	movs	r1, r3
 80044cc:	3501      	adds	r5, #1
 80044ce:	6063      	str	r3, [r4, #4]
 80044d0:	782a      	ldrb	r2, [r5, #0]
 80044d2:	1c6e      	adds	r6, r5, #1
 80044d4:	3a30      	subs	r2, #48	@ 0x30
 80044d6:	2a09      	cmp	r2, #9
 80044d8:	d903      	bls.n	80044e2 <_svfiprintf_r+0x1a6>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0c8      	beq.n	8004470 <_svfiprintf_r+0x134>
 80044de:	9109      	str	r1, [sp, #36]	@ 0x24
 80044e0:	e7c6      	b.n	8004470 <_svfiprintf_r+0x134>
 80044e2:	4341      	muls	r1, r0
 80044e4:	0035      	movs	r5, r6
 80044e6:	2301      	movs	r3, #1
 80044e8:	1889      	adds	r1, r1, r2
 80044ea:	e7f1      	b.n	80044d0 <_svfiprintf_r+0x194>
 80044ec:	aa07      	add	r2, sp, #28
 80044ee:	9200      	str	r2, [sp, #0]
 80044f0:	0021      	movs	r1, r4
 80044f2:	003a      	movs	r2, r7
 80044f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <_svfiprintf_r+0x1f8>)
 80044f6:	9803      	ldr	r0, [sp, #12]
 80044f8:	e000      	b.n	80044fc <_svfiprintf_r+0x1c0>
 80044fa:	bf00      	nop
 80044fc:	9004      	str	r0, [sp, #16]
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	3301      	adds	r3, #1
 8004502:	d1d6      	bne.n	80044b2 <_svfiprintf_r+0x176>
 8004504:	89bb      	ldrh	r3, [r7, #12]
 8004506:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004508:	065b      	lsls	r3, r3, #25
 800450a:	d500      	bpl.n	800450e <_svfiprintf_r+0x1d2>
 800450c:	e72c      	b.n	8004368 <_svfiprintf_r+0x2c>
 800450e:	b021      	add	sp, #132	@ 0x84
 8004510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004512:	aa07      	add	r2, sp, #28
 8004514:	9200      	str	r2, [sp, #0]
 8004516:	0021      	movs	r1, r4
 8004518:	003a      	movs	r2, r7
 800451a:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <_svfiprintf_r+0x1f8>)
 800451c:	9803      	ldr	r0, [sp, #12]
 800451e:	f000 f87b 	bl	8004618 <_printf_i>
 8004522:	e7eb      	b.n	80044fc <_svfiprintf_r+0x1c0>
 8004524:	080049f4 	.word	0x080049f4
 8004528:	080049fa 	.word	0x080049fa
 800452c:	080049fe 	.word	0x080049fe
 8004530:	00000000 	.word	0x00000000
 8004534:	0800427d 	.word	0x0800427d

08004538 <_printf_common>:
 8004538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800453a:	0016      	movs	r6, r2
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	688a      	ldr	r2, [r1, #8]
 8004540:	690b      	ldr	r3, [r1, #16]
 8004542:	000c      	movs	r4, r1
 8004544:	9000      	str	r0, [sp, #0]
 8004546:	4293      	cmp	r3, r2
 8004548:	da00      	bge.n	800454c <_printf_common+0x14>
 800454a:	0013      	movs	r3, r2
 800454c:	0022      	movs	r2, r4
 800454e:	6033      	str	r3, [r6, #0]
 8004550:	3243      	adds	r2, #67	@ 0x43
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	2a00      	cmp	r2, #0
 8004556:	d001      	beq.n	800455c <_printf_common+0x24>
 8004558:	3301      	adds	r3, #1
 800455a:	6033      	str	r3, [r6, #0]
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	069b      	lsls	r3, r3, #26
 8004560:	d502      	bpl.n	8004568 <_printf_common+0x30>
 8004562:	6833      	ldr	r3, [r6, #0]
 8004564:	3302      	adds	r3, #2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	2306      	movs	r3, #6
 800456c:	0015      	movs	r5, r2
 800456e:	401d      	ands	r5, r3
 8004570:	421a      	tst	r2, r3
 8004572:	d027      	beq.n	80045c4 <_printf_common+0x8c>
 8004574:	0023      	movs	r3, r4
 8004576:	3343      	adds	r3, #67	@ 0x43
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	4193      	sbcs	r3, r2
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	0692      	lsls	r2, r2, #26
 8004582:	d430      	bmi.n	80045e6 <_printf_common+0xae>
 8004584:	0022      	movs	r2, r4
 8004586:	9901      	ldr	r1, [sp, #4]
 8004588:	9800      	ldr	r0, [sp, #0]
 800458a:	9d08      	ldr	r5, [sp, #32]
 800458c:	3243      	adds	r2, #67	@ 0x43
 800458e:	47a8      	blx	r5
 8004590:	3001      	adds	r0, #1
 8004592:	d025      	beq.n	80045e0 <_printf_common+0xa8>
 8004594:	2206      	movs	r2, #6
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	2500      	movs	r5, #0
 800459a:	4013      	ands	r3, r2
 800459c:	2b04      	cmp	r3, #4
 800459e:	d105      	bne.n	80045ac <_printf_common+0x74>
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	68e5      	ldr	r5, [r4, #12]
 80045a4:	1aed      	subs	r5, r5, r3
 80045a6:	43eb      	mvns	r3, r5
 80045a8:	17db      	asrs	r3, r3, #31
 80045aa:	401d      	ands	r5, r3
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	6922      	ldr	r2, [r4, #16]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	dd01      	ble.n	80045b8 <_printf_common+0x80>
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	18ed      	adds	r5, r5, r3
 80045b8:	2600      	movs	r6, #0
 80045ba:	42b5      	cmp	r5, r6
 80045bc:	d120      	bne.n	8004600 <_printf_common+0xc8>
 80045be:	2000      	movs	r0, #0
 80045c0:	e010      	b.n	80045e4 <_printf_common+0xac>
 80045c2:	3501      	adds	r5, #1
 80045c4:	68e3      	ldr	r3, [r4, #12]
 80045c6:	6832      	ldr	r2, [r6, #0]
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	42ab      	cmp	r3, r5
 80045cc:	ddd2      	ble.n	8004574 <_printf_common+0x3c>
 80045ce:	0022      	movs	r2, r4
 80045d0:	2301      	movs	r3, #1
 80045d2:	9901      	ldr	r1, [sp, #4]
 80045d4:	9800      	ldr	r0, [sp, #0]
 80045d6:	9f08      	ldr	r7, [sp, #32]
 80045d8:	3219      	adds	r2, #25
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	d1f0      	bne.n	80045c2 <_printf_common+0x8a>
 80045e0:	2001      	movs	r0, #1
 80045e2:	4240      	negs	r0, r0
 80045e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045e6:	2030      	movs	r0, #48	@ 0x30
 80045e8:	18e1      	adds	r1, r4, r3
 80045ea:	3143      	adds	r1, #67	@ 0x43
 80045ec:	7008      	strb	r0, [r1, #0]
 80045ee:	0021      	movs	r1, r4
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	3145      	adds	r1, #69	@ 0x45
 80045f4:	7809      	ldrb	r1, [r1, #0]
 80045f6:	18a2      	adds	r2, r4, r2
 80045f8:	3243      	adds	r2, #67	@ 0x43
 80045fa:	3302      	adds	r3, #2
 80045fc:	7011      	strb	r1, [r2, #0]
 80045fe:	e7c1      	b.n	8004584 <_printf_common+0x4c>
 8004600:	0022      	movs	r2, r4
 8004602:	2301      	movs	r3, #1
 8004604:	9901      	ldr	r1, [sp, #4]
 8004606:	9800      	ldr	r0, [sp, #0]
 8004608:	9f08      	ldr	r7, [sp, #32]
 800460a:	321a      	adds	r2, #26
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d0e6      	beq.n	80045e0 <_printf_common+0xa8>
 8004612:	3601      	adds	r6, #1
 8004614:	e7d1      	b.n	80045ba <_printf_common+0x82>
	...

08004618 <_printf_i>:
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461a:	b08b      	sub	sp, #44	@ 0x2c
 800461c:	9206      	str	r2, [sp, #24]
 800461e:	000a      	movs	r2, r1
 8004620:	3243      	adds	r2, #67	@ 0x43
 8004622:	9307      	str	r3, [sp, #28]
 8004624:	9005      	str	r0, [sp, #20]
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	7e0a      	ldrb	r2, [r1, #24]
 800462a:	000c      	movs	r4, r1
 800462c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800462e:	2a78      	cmp	r2, #120	@ 0x78
 8004630:	d809      	bhi.n	8004646 <_printf_i+0x2e>
 8004632:	2a62      	cmp	r2, #98	@ 0x62
 8004634:	d80b      	bhi.n	800464e <_printf_i+0x36>
 8004636:	2a00      	cmp	r2, #0
 8004638:	d100      	bne.n	800463c <_printf_i+0x24>
 800463a:	e0bc      	b.n	80047b6 <_printf_i+0x19e>
 800463c:	497b      	ldr	r1, [pc, #492]	@ (800482c <_printf_i+0x214>)
 800463e:	9104      	str	r1, [sp, #16]
 8004640:	2a58      	cmp	r2, #88	@ 0x58
 8004642:	d100      	bne.n	8004646 <_printf_i+0x2e>
 8004644:	e090      	b.n	8004768 <_printf_i+0x150>
 8004646:	0025      	movs	r5, r4
 8004648:	3542      	adds	r5, #66	@ 0x42
 800464a:	702a      	strb	r2, [r5, #0]
 800464c:	e022      	b.n	8004694 <_printf_i+0x7c>
 800464e:	0010      	movs	r0, r2
 8004650:	3863      	subs	r0, #99	@ 0x63
 8004652:	2815      	cmp	r0, #21
 8004654:	d8f7      	bhi.n	8004646 <_printf_i+0x2e>
 8004656:	f7fb fd5f 	bl	8000118 <__gnu_thumb1_case_shi>
 800465a:	0016      	.short	0x0016
 800465c:	fff6001f 	.word	0xfff6001f
 8004660:	fff6fff6 	.word	0xfff6fff6
 8004664:	001ffff6 	.word	0x001ffff6
 8004668:	fff6fff6 	.word	0xfff6fff6
 800466c:	fff6fff6 	.word	0xfff6fff6
 8004670:	003600a1 	.word	0x003600a1
 8004674:	fff60080 	.word	0xfff60080
 8004678:	00b2fff6 	.word	0x00b2fff6
 800467c:	0036fff6 	.word	0x0036fff6
 8004680:	fff6fff6 	.word	0xfff6fff6
 8004684:	0084      	.short	0x0084
 8004686:	0025      	movs	r5, r4
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	3542      	adds	r5, #66	@ 0x42
 800468c:	1d11      	adds	r1, r2, #4
 800468e:	6019      	str	r1, [r3, #0]
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	702b      	strb	r3, [r5, #0]
 8004694:	2301      	movs	r3, #1
 8004696:	e0a0      	b.n	80047da <_printf_i+0x1c2>
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	6809      	ldr	r1, [r1, #0]
 800469c:	1d02      	adds	r2, r0, #4
 800469e:	060d      	lsls	r5, r1, #24
 80046a0:	d50b      	bpl.n	80046ba <_printf_i+0xa2>
 80046a2:	6806      	ldr	r6, [r0, #0]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	da03      	bge.n	80046b2 <_printf_i+0x9a>
 80046aa:	232d      	movs	r3, #45	@ 0x2d
 80046ac:	9a03      	ldr	r2, [sp, #12]
 80046ae:	4276      	negs	r6, r6
 80046b0:	7013      	strb	r3, [r2, #0]
 80046b2:	4b5e      	ldr	r3, [pc, #376]	@ (800482c <_printf_i+0x214>)
 80046b4:	270a      	movs	r7, #10
 80046b6:	9304      	str	r3, [sp, #16]
 80046b8:	e018      	b.n	80046ec <_printf_i+0xd4>
 80046ba:	6806      	ldr	r6, [r0, #0]
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	0649      	lsls	r1, r1, #25
 80046c0:	d5f1      	bpl.n	80046a6 <_printf_i+0x8e>
 80046c2:	b236      	sxth	r6, r6
 80046c4:	e7ef      	b.n	80046a6 <_printf_i+0x8e>
 80046c6:	6808      	ldr	r0, [r1, #0]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	c940      	ldmia	r1!, {r6}
 80046cc:	0605      	lsls	r5, r0, #24
 80046ce:	d402      	bmi.n	80046d6 <_printf_i+0xbe>
 80046d0:	0640      	lsls	r0, r0, #25
 80046d2:	d500      	bpl.n	80046d6 <_printf_i+0xbe>
 80046d4:	b2b6      	uxth	r6, r6
 80046d6:	6019      	str	r1, [r3, #0]
 80046d8:	4b54      	ldr	r3, [pc, #336]	@ (800482c <_printf_i+0x214>)
 80046da:	270a      	movs	r7, #10
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	2a6f      	cmp	r2, #111	@ 0x6f
 80046e0:	d100      	bne.n	80046e4 <_printf_i+0xcc>
 80046e2:	3f02      	subs	r7, #2
 80046e4:	0023      	movs	r3, r4
 80046e6:	2200      	movs	r2, #0
 80046e8:	3343      	adds	r3, #67	@ 0x43
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	60a3      	str	r3, [r4, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	db03      	blt.n	80046fc <_printf_i+0xe4>
 80046f4:	2104      	movs	r1, #4
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	438a      	bics	r2, r1
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	d102      	bne.n	8004706 <_printf_i+0xee>
 8004700:	9d03      	ldr	r5, [sp, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <_printf_i+0x108>
 8004706:	9d03      	ldr	r5, [sp, #12]
 8004708:	0030      	movs	r0, r6
 800470a:	0039      	movs	r1, r7
 800470c:	f7fb fd94 	bl	8000238 <__aeabi_uidivmod>
 8004710:	9b04      	ldr	r3, [sp, #16]
 8004712:	3d01      	subs	r5, #1
 8004714:	5c5b      	ldrb	r3, [r3, r1]
 8004716:	702b      	strb	r3, [r5, #0]
 8004718:	0033      	movs	r3, r6
 800471a:	0006      	movs	r6, r0
 800471c:	429f      	cmp	r7, r3
 800471e:	d9f3      	bls.n	8004708 <_printf_i+0xf0>
 8004720:	2f08      	cmp	r7, #8
 8004722:	d109      	bne.n	8004738 <_printf_i+0x120>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	d506      	bpl.n	8004738 <_printf_i+0x120>
 800472a:	6862      	ldr	r2, [r4, #4]
 800472c:	6923      	ldr	r3, [r4, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	dc02      	bgt.n	8004738 <_printf_i+0x120>
 8004732:	2330      	movs	r3, #48	@ 0x30
 8004734:	3d01      	subs	r5, #1
 8004736:	702b      	strb	r3, [r5, #0]
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	1b5b      	subs	r3, r3, r5
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	9b07      	ldr	r3, [sp, #28]
 8004740:	0021      	movs	r1, r4
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	9805      	ldr	r0, [sp, #20]
 8004746:	9b06      	ldr	r3, [sp, #24]
 8004748:	aa09      	add	r2, sp, #36	@ 0x24
 800474a:	f7ff fef5 	bl	8004538 <_printf_common>
 800474e:	3001      	adds	r0, #1
 8004750:	d148      	bne.n	80047e4 <_printf_i+0x1cc>
 8004752:	2001      	movs	r0, #1
 8004754:	4240      	negs	r0, r0
 8004756:	b00b      	add	sp, #44	@ 0x2c
 8004758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475a:	2220      	movs	r2, #32
 800475c:	6809      	ldr	r1, [r1, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	6022      	str	r2, [r4, #0]
 8004762:	2278      	movs	r2, #120	@ 0x78
 8004764:	4932      	ldr	r1, [pc, #200]	@ (8004830 <_printf_i+0x218>)
 8004766:	9104      	str	r1, [sp, #16]
 8004768:	0021      	movs	r1, r4
 800476a:	3145      	adds	r1, #69	@ 0x45
 800476c:	700a      	strb	r2, [r1, #0]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	c940      	ldmia	r1!, {r6}
 8004774:	0610      	lsls	r0, r2, #24
 8004776:	d402      	bmi.n	800477e <_printf_i+0x166>
 8004778:	0650      	lsls	r0, r2, #25
 800477a:	d500      	bpl.n	800477e <_printf_i+0x166>
 800477c:	b2b6      	uxth	r6, r6
 800477e:	6019      	str	r1, [r3, #0]
 8004780:	07d3      	lsls	r3, r2, #31
 8004782:	d502      	bpl.n	800478a <_printf_i+0x172>
 8004784:	2320      	movs	r3, #32
 8004786:	4313      	orrs	r3, r2
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	2e00      	cmp	r6, #0
 800478c:	d001      	beq.n	8004792 <_printf_i+0x17a>
 800478e:	2710      	movs	r7, #16
 8004790:	e7a8      	b.n	80046e4 <_printf_i+0xcc>
 8004792:	2220      	movs	r2, #32
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	4393      	bics	r3, r2
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	e7f8      	b.n	800478e <_printf_i+0x176>
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	680d      	ldr	r5, [r1, #0]
 80047a0:	1d10      	adds	r0, r2, #4
 80047a2:	6949      	ldr	r1, [r1, #20]
 80047a4:	6018      	str	r0, [r3, #0]
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	062e      	lsls	r6, r5, #24
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0x198>
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <_printf_i+0x19e>
 80047b0:	066d      	lsls	r5, r5, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0x194>
 80047b4:	8019      	strh	r1, [r3, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9d03      	ldr	r5, [sp, #12]
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	e7bf      	b.n	800473e <_printf_i+0x126>
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	1d11      	adds	r1, r2, #4
 80047c2:	6019      	str	r1, [r3, #0]
 80047c4:	6815      	ldr	r5, [r2, #0]
 80047c6:	2100      	movs	r1, #0
 80047c8:	0028      	movs	r0, r5
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	f000 f858 	bl	8004880 <memchr>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d001      	beq.n	80047d8 <_printf_i+0x1c0>
 80047d4:	1b40      	subs	r0, r0, r5
 80047d6:	6060      	str	r0, [r4, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	2300      	movs	r3, #0
 80047de:	9a03      	ldr	r2, [sp, #12]
 80047e0:	7013      	strb	r3, [r2, #0]
 80047e2:	e7ac      	b.n	800473e <_printf_i+0x126>
 80047e4:	002a      	movs	r2, r5
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	9906      	ldr	r1, [sp, #24]
 80047ea:	9805      	ldr	r0, [sp, #20]
 80047ec:	9d07      	ldr	r5, [sp, #28]
 80047ee:	47a8      	blx	r5
 80047f0:	3001      	adds	r0, #1
 80047f2:	d0ae      	beq.n	8004752 <_printf_i+0x13a>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	079b      	lsls	r3, r3, #30
 80047f8:	d415      	bmi.n	8004826 <_printf_i+0x20e>
 80047fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047fc:	68e0      	ldr	r0, [r4, #12]
 80047fe:	4298      	cmp	r0, r3
 8004800:	daa9      	bge.n	8004756 <_printf_i+0x13e>
 8004802:	0018      	movs	r0, r3
 8004804:	e7a7      	b.n	8004756 <_printf_i+0x13e>
 8004806:	0022      	movs	r2, r4
 8004808:	2301      	movs	r3, #1
 800480a:	9906      	ldr	r1, [sp, #24]
 800480c:	9805      	ldr	r0, [sp, #20]
 800480e:	9e07      	ldr	r6, [sp, #28]
 8004810:	3219      	adds	r2, #25
 8004812:	47b0      	blx	r6
 8004814:	3001      	adds	r0, #1
 8004816:	d09c      	beq.n	8004752 <_printf_i+0x13a>
 8004818:	3501      	adds	r5, #1
 800481a:	68e3      	ldr	r3, [r4, #12]
 800481c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	42ab      	cmp	r3, r5
 8004822:	dcf0      	bgt.n	8004806 <_printf_i+0x1ee>
 8004824:	e7e9      	b.n	80047fa <_printf_i+0x1e2>
 8004826:	2500      	movs	r5, #0
 8004828:	e7f7      	b.n	800481a <_printf_i+0x202>
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	08004a05 	.word	0x08004a05
 8004830:	08004a16 	.word	0x08004a16

08004834 <memmove>:
 8004834:	b510      	push	{r4, lr}
 8004836:	4288      	cmp	r0, r1
 8004838:	d806      	bhi.n	8004848 <memmove+0x14>
 800483a:	2300      	movs	r3, #0
 800483c:	429a      	cmp	r2, r3
 800483e:	d008      	beq.n	8004852 <memmove+0x1e>
 8004840:	5ccc      	ldrb	r4, [r1, r3]
 8004842:	54c4      	strb	r4, [r0, r3]
 8004844:	3301      	adds	r3, #1
 8004846:	e7f9      	b.n	800483c <memmove+0x8>
 8004848:	188b      	adds	r3, r1, r2
 800484a:	4298      	cmp	r0, r3
 800484c:	d2f5      	bcs.n	800483a <memmove+0x6>
 800484e:	3a01      	subs	r2, #1
 8004850:	d200      	bcs.n	8004854 <memmove+0x20>
 8004852:	bd10      	pop	{r4, pc}
 8004854:	5c8b      	ldrb	r3, [r1, r2]
 8004856:	5483      	strb	r3, [r0, r2]
 8004858:	e7f9      	b.n	800484e <memmove+0x1a>
	...

0800485c <_sbrk_r>:
 800485c:	2300      	movs	r3, #0
 800485e:	b570      	push	{r4, r5, r6, lr}
 8004860:	4d06      	ldr	r5, [pc, #24]	@ (800487c <_sbrk_r+0x20>)
 8004862:	0004      	movs	r4, r0
 8004864:	0008      	movs	r0, r1
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	f7fc fdb0 	bl	80013cc <_sbrk>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d103      	bne.n	8004878 <_sbrk_r+0x1c>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d000      	beq.n	8004878 <_sbrk_r+0x1c>
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	2000029c 	.word	0x2000029c

08004880 <memchr>:
 8004880:	b2c9      	uxtb	r1, r1
 8004882:	1882      	adds	r2, r0, r2
 8004884:	4290      	cmp	r0, r2
 8004886:	d101      	bne.n	800488c <memchr+0xc>
 8004888:	2000      	movs	r0, #0
 800488a:	4770      	bx	lr
 800488c:	7803      	ldrb	r3, [r0, #0]
 800488e:	428b      	cmp	r3, r1
 8004890:	d0fb      	beq.n	800488a <memchr+0xa>
 8004892:	3001      	adds	r0, #1
 8004894:	e7f6      	b.n	8004884 <memchr+0x4>

08004896 <memcpy>:
 8004896:	2300      	movs	r3, #0
 8004898:	b510      	push	{r4, lr}
 800489a:	429a      	cmp	r2, r3
 800489c:	d100      	bne.n	80048a0 <memcpy+0xa>
 800489e:	bd10      	pop	{r4, pc}
 80048a0:	5ccc      	ldrb	r4, [r1, r3]
 80048a2:	54c4      	strb	r4, [r0, r3]
 80048a4:	3301      	adds	r3, #1
 80048a6:	e7f8      	b.n	800489a <memcpy+0x4>

080048a8 <_realloc_r>:
 80048a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048aa:	0006      	movs	r6, r0
 80048ac:	000c      	movs	r4, r1
 80048ae:	0015      	movs	r5, r2
 80048b0:	2900      	cmp	r1, #0
 80048b2:	d105      	bne.n	80048c0 <_realloc_r+0x18>
 80048b4:	0011      	movs	r1, r2
 80048b6:	f7ff fc51 	bl	800415c <_malloc_r>
 80048ba:	0004      	movs	r4, r0
 80048bc:	0020      	movs	r0, r4
 80048be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d103      	bne.n	80048cc <_realloc_r+0x24>
 80048c4:	f7ff fbde 	bl	8004084 <_free_r>
 80048c8:	2400      	movs	r4, #0
 80048ca:	e7f7      	b.n	80048bc <_realloc_r+0x14>
 80048cc:	f000 f81b 	bl	8004906 <_malloc_usable_size_r>
 80048d0:	0007      	movs	r7, r0
 80048d2:	4285      	cmp	r5, r0
 80048d4:	d802      	bhi.n	80048dc <_realloc_r+0x34>
 80048d6:	0843      	lsrs	r3, r0, #1
 80048d8:	42ab      	cmp	r3, r5
 80048da:	d3ef      	bcc.n	80048bc <_realloc_r+0x14>
 80048dc:	0029      	movs	r1, r5
 80048de:	0030      	movs	r0, r6
 80048e0:	f7ff fc3c 	bl	800415c <_malloc_r>
 80048e4:	9001      	str	r0, [sp, #4]
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0ee      	beq.n	80048c8 <_realloc_r+0x20>
 80048ea:	002a      	movs	r2, r5
 80048ec:	42bd      	cmp	r5, r7
 80048ee:	d900      	bls.n	80048f2 <_realloc_r+0x4a>
 80048f0:	003a      	movs	r2, r7
 80048f2:	0021      	movs	r1, r4
 80048f4:	9801      	ldr	r0, [sp, #4]
 80048f6:	f7ff ffce 	bl	8004896 <memcpy>
 80048fa:	0021      	movs	r1, r4
 80048fc:	0030      	movs	r0, r6
 80048fe:	f7ff fbc1 	bl	8004084 <_free_r>
 8004902:	9c01      	ldr	r4, [sp, #4]
 8004904:	e7da      	b.n	80048bc <_realloc_r+0x14>

08004906 <_malloc_usable_size_r>:
 8004906:	1f0b      	subs	r3, r1, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1f18      	subs	r0, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	da01      	bge.n	8004914 <_malloc_usable_size_r+0xe>
 8004910:	580b      	ldr	r3, [r1, r0]
 8004912:	18c0      	adds	r0, r0, r3
 8004914:	4770      	bx	lr
	...

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
